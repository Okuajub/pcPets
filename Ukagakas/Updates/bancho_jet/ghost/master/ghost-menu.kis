#--
# Menus
#--

# You can write any dialogue you want for them to say when you first open the menu here.
SakuMenuTalk : "\0\s[0]What's up?","\0\s[0]What'cha need?","\0\s[0]Huh?"

OnSakuraMenu : (
    # You can safely ignore this line. It just remembers what dialogue the user saw when changing the talk interval.
    $( if $[ $(Reference 0) != 1 ] $(setstr MenuDialogue ${SakuMenuTalk}\w4 ) else if $[ $( match ${MenuDialogue} "\_q" ) = -1 ] $(setstr MenuDialogue \_q${MenuDialogue}\_q ) )

    \t\*\b2${MenuDialogue}\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Say Something,OnAITalk]
    $( if $[ ${lastTalk} ] (\n\![*]\q[Repeat Yourself,OnLastTalk]) )
    \n\n[half]
    \![*]\q[Gang Info,OnGangMenu]
    #\![*]\q[Config Menu,OnConfigMenu]
    #\![*]\q[Change Name,OnChangeName]
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,0]
    \n\n

    # Talkrate Assignment
    $(setstr @interval ${talkinterval})
    $( if $[ ${@interval} = 'Never' ] $(setstr @form "") else if $[ ${@interval} > 59 ] $( setstr @interval $[ ${@interval} / 60 ]; setstr @form minutes ) else $( setstr @form seconds ) )
    $(if $[${@interval} == 1] $(setstr @form minute))

    # Talkrate Display
    "\f[italic,true]Talkrate:" ${@interval} ${@form}\n\f[italic,default]
    \![*]\q[30s,OnAssignTalkRate,30] \![*]\q[1m,OnAssignTalkRate,60] \![*]\q[3m,OnAssignTalkRate,180]
    "\![*]\q[5m,OnAssignTalkRate,300] \![*]\q[10m,OnAssignTalkRate,600] \![*]\q[15m,OnAssignTalkRate,900] \![*]\q[Never,OnAssignTalkRate,Never]"
    \n\n[half]

    # Retrieves info about the present time
    $(setstr @weekday $(if $[$(date %w) = 0] "Sun" else if $[$(date %w) = 1] "Mon" else if $[$(date %w) = 2] "Tues" else if $[$(date %w) = 3] "Weds" else if $[$(date %w) = 4] "Thurs" else if $[$(date %w) = 5] "Fri" else if $[$(date %w) = 6] "Sat"))
    $(setstr @hour $(date %H); setstr @minute $(date %M))

    # Displays the time
    \f[italic,true]${@weekday}", %month/%day, "${@hour}":"${@minute}\f[italic,default]
)

#--
# Config Menu
#--
# Shouldn't be able to access this.

# Config Menu Talks
ConfigMenuTalk : "\0\s[0]Huh?"

OnConfigMenu : (
    \t\*\b2${ConfigMenuTalk}\w4\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Change Name,OnChangeName]
    \n
    \![*]\q[Change Pronouns,OnChangePronouns]
    \n
    \![*]"Uninstall: "\q[$( if $[${vanishFlag} = 1] $(echo "ON") else $(echo "OFF") ),OnToggleVanish]
    \n\n[half]
    \![*]\q[Back,OnSakuraMenu]
)

#-- Name Change Talk
# These talks are used as reactions to name choices.

# This is what your Ghost will say when selecting the name config.
talk.OnChangeName : "\0\s[0]Hey, no problem! What would you like me to call you?"
# This is what your Ghost will say when selecting the add name option.
talk.OnAddName : "\0\s[0]Soooo.... What would you like to be called as well?"
# This is what your Ghost will say when selecting the replace name option.
talk.OnReplaceName : "\0\s[0]I understand. What would you like me to call you instead?"
# This is what your Ghost will say when selecting the delete name option.
talk.OnDeleteName : "\0\s[0]Anything for you, what name shouldn't I call you anymore?"

# A response for if the name was the same as the name they already had.
talk.UnchangedName : "\0\s[0]Huh. Oookay."
# A response for if the user didn't input anything.
talk.NoName : "\0\s[0]Is "${username}" still fine, then?"
# A response for if the User inputs a name which is the same as the characters' names.
talk.SelfName : "\0\s[0]Heyyy, that's my name. You trying to steal my style?"
# A response for if the User inputs a name which is in the blacklist. You can edit the blacklist in dict-menu.kis.
talk.BadName : "\0\s[0]Errr, are you sure about that?"

# This is what your Ghost will say to confirm if the user's name is correct. $(Reference 0) is the inputted name name.
talk.OnConfirmName : "\0\s[0]So, "$(Reference 0)", right?"
# This is what the Ghost will say after the name has been changed.
talk.OnNameChanged : "\0\s[0]"$(Reference 0)"! Nice name."

# This is what the Ghost will say to confirm if the user wants to delete a name. $(Reference 0) is the name to be deleted.
talk.ConfirmNameDelete : "\0\s[0]Not going with "$username[$(Reference 0)]" anymore?"
# This is what the Ghost will say when the name has been deleted.
talk.OnNameDeleted : "\0\s[0]You betcha. I won't call you that anymore."

#-- Pronouns Change Talk
# These talks are used when configuring the pronoun change options.

# This is what your Ghost will say when selecting the change pronouns option.
talk.OnChangePronouns : "\0\s[0]Can do. What's right, then?"
# What your Ghost says when providing the default pronouns.
talk.OnChoosePronouns : "\0\s[0]Which of these seems right?"
# When successfully changing pronouns.
talk.OnPronounsChanged : "\0\s[0]Thanks. I've got it down now."
# When choosing a pronoun set to delete.
talk.OnDeletePronouns : "\0\s[0]Which one shouldn't I use?"
# When successsfully deleting a set of pronouns.
talk.OnPronounsDeleted : "\0\s[0]Alright. I'll remember not to use those."

# When inputting custom pronouns
# You can change this as you'd like, but I do suggest giving an example of the pronoun for the ease of the user.
talk.Pronouns1 : "\0\s[0]What pronoun would you use in place of 'he', 'she', or 'they'?"
talk.Pronouns2 : "\0\s[0]And what pronoun would you use in place of 'him', 'her', or 'them'?"
talk.Pronouns3 : "\0\s[0]How about 'his', 'her', or 'their'?"
talk.Pronouns4 : "\0\s[0]What pronoun would you use in place of 'his', 'hers', or 'theirs'?"
talk.Pronouns5 : "\0\s[0]Last one. What pronoun would you use in place of 'himself', 'herself', or 'themself'?"
talk.Pronouns6 : "\0\s[0]Alright. Last question. Is this set singular or plural? '"${temp.they}" are tired.' is an example of these being used in the plural."

# When checking with the User if they typed their pronouns right.
talk.OnConfirmPronouns : "\0\s[0]So, is "${temp.they}/${temp.them}/${temp.their}/${temp.theirs}/${temp.themself}" correct?"
# When the User cancels the pronoun change.
talk.OnExitPronouns : "\0\s[0]No problem."
# When a user tests their pronouns. If you add another, remember to use the '$user.they[${i}]' format, or else it won't print right.
talk.OnTestPronouns : (
    "I heard that "${username}" went to the animal shelter recently. "$(cap $user.they[${i}])" saw a bunch of cute animals that "$user.they[${i}]" wanted to be "$user.theirs[${i}]". "
    $(cap $user.their[${i}])" face lit up looking at them. At least, that's what I heard about "$user.them[${i}]". I hope "$user.they[${i}] $(SP 'is' 'are') "taking care of "$user.themself[${i}]"."
)

OnAssignTalkRate : (
    $( setstr talkinterval $(Reference 0); set @dialogue $(Reference 1) )
    "\![raise,OnSakuraMenu,1]"
)

# This handles quitting dialogue.
OnQuit : $(
    if $[$(Reference 0) == 0] \![close,inputbox,__SYSTEM_ALL_INPUT__]${SakuraQuit}
    else \![close,inputbox,__SYSTEM_ALL_INPUT__]${KeroQuit}
)
# This is used for more than just quitting the menu. It's also used when quitting out of creating custom pronouns, so be mindful of that.
SakuraQuit : "\0\s[0]You got it, boss.", "\0\s[0]Sure thing, boss."

# You can ignore this one. Its only purpose is to repeat what the Ghost last said when used, such as the repeat option in the Sakura Menu.
OnLastTalk : ${lastTalk}



#--
# Kero Menu
#--
# A Kero's menu is often used for extra features or information not provided by the Sakura.
# If you don't have a Kero, you can leave this alone or remove it. But I suggest taking a look at it to get an idea of what you can do.

KeroMenuTalk : "\1\s[15]What's up?","\1\s[15]What can I do for you, "${username}"?"

KeroQuit : "\1\s[10]Thanks for checking in!", "\1\s[16]Talk to you later!"

OnKeroMenu : (
    \1\t\*\b2${KeroMenuTalk}\w4\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Tell me about Yourselves,OnIntroduceSelf]
    \n
    \![*]\q[Tell me about Ukagaka,OnIntroduceUkagaka]
    \n
    \![*]\q[Tell me about Kawari,OnIntroduceKawari]
    \n
    \![*]\q[Tell me about YAYA,OnIntroduceYAYA]
    # 'devmode' is an entry to engage development mode. To engage it, put '$(setstr devmode 1)' in the script input.
    $(if $[${devmode} = 1] $(echo \n\n[half]\![*]\q[Debug Menu,OnDebugMenu]))
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,1]
)

# Having a debug menu can be helpful as you can hide it from the user as needed.
OnDebugMenu : (
    "\1\t\*\b2\s[12]\b2Uh oh, something go wrong? This menu's here to handle hold debugging functions.\s[10] Alright. Here's the debug options.\n\n[half]"\w4\_q\![set,autoscroll,disable]
    \![*]\q[Show All Saved Entries,OnShowData]
    \n
    \![*]\q[Test Variable,OnTestVariable]
    \n
    \n[half]
    \![*]\q[Open Kosui Debugger,OnOpenKosui]
    \n
    \![*]\q[Tell me about Kosui,OnIntroduceKosui]
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,1]
)

# Shows the current user data. Note: When more than 1 value is saved to one entry, it will randomly pick from said entry, as any entry call would.
OnShowData : $(
    foreach @entries savedataParam $( echo "\b2"${@entries}": "; echo ${${@entries}}"\n" )
)

# This entry can be used to test code on demand. Very helpful for longer and more complex SakuraScript or KIS.
OnTestVariable : (
    "\1\s[10]Testing!\n\n[half]"
    $(setstr tentry $(chr 1); echo ${tentry};)
)

# This won't work if you don't have Kosui in your ghost\master folder. Also not terribly useful since Kosui doesn't recognize that it's in the Ghost's folder when opened.
OnOpenKosui : (
    "\1\s[10]\![open,file,kosui.exe]Sure thing. Kosui, coming up."
)