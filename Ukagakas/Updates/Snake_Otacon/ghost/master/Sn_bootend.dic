//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue!
//You should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//Much of this file you will only have to set up once, so take heart!


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise] or by just sticking OnFunction somewhere. A function that does NOT start with On, however, can be a bit finicky. You can create your own functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.

//If you're having trouble getting a function of yours to run, like Doodlebop, try changing it to OnDoodlebop and see if that fixes it.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This is where you'll want to set up an introduction and ask your user for information your ghost will need, like their name and what pronouns they'll be using. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from master). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "USER" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = 0 //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). Defaults to 0, which is off.
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	firstboot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name.
	//OKUAJUB: Snake and Otacon specific variables.
	devMode = 0 //Toggle for enabling dev mode, which enables some unstable features. Default 0.
	beginnerConfig = "" // Configures if the user is a beginner ghost user. Asks in FirstBoot. Defaults to "". Will be set to On or Off in the set up.
	punchConfig = "on" // Punching configuration. Can be set to "On" which enables default punching mechanics, "Apologize" which enables apologizing for punching, "Confirm" which asks the user if they would like to punch, and "Off" which turns off punching entirely.
	
	codecTimer = "" //Timer for Otacon's codec searches. blank at first.
	missionTimer = "" //Timer for Snake's missions. blank at first.
	codecFatigue = 0 //Cooldown timer for Codec Search
	missionFatigue = 0 //Cooldown timer for Missions
	otacoins = 0 //Tracks currency
	
	//okay, hold onto your boots, this is where the achievement/clutter items variables go! (I promise, I tried an array and it did not work how I liked. So.... the messy way we go.) These should all start off blank.
	mk2 = ""
	mk3 = ""
	
	clickShadowMoses = 0 //Click counting variable for Shadow Moses
	clickShadowMosesIncident = 0 //Click counting variable for Shadow Moses *incident*
	clickMeiLing = 0 //Click counting variable for Mei Ling
	clickRaiden = 0 //Click counting variable for Raiden
	clickJaeger = 0 //Click counting variable for Frank Jaeger
	clickBigBoss = 0 //Click counting variable for Big Boss
	clickRex = 0 //Click counting variable for Rex
	askLove = 0 //Counts if you've asked Snake about his love life.
	
	snakeFeelings = -10 //Snake's feelings. Lightly negative at first.
	otaconFeelings = 0 //Otacon's feelings. Neutral at first.
	snakeKetchups = 0 //Count of how many ketchup bottles you have given Snake/Otacon.
	snakeApologies = 0 //How many times you have apologized to Snake.
	isNeko = 0 //Flag for if Otacon is Nekomimified (only activatable in the Solid Shell). Default is 0. 0 means Off. 1 means On.
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly. This is one of the very few instances you'll ever use it, so make sure to get out of it at the end! I'll tell you when, so don't worry.
		//In Notepad++ with C language, you'll also notice that this dialogue is black instead of grey. This is because of the use of the backwards slash as mentioned in the advanced section of the SakuraScripting page. Do you see near the bottom where it has \n\n[half]/ with the other slash at the end before the choices are listed? You will want to replace dialogue up that \n\n[half], but do not mess with the choices beyond that unless you know what you're doing.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must. And REMEMBER what I said about \![enter,passivemode]! Do NOT delete that tag!
		
		"\![enter,passivemode]\0\s[0]This is Snake, Otacon do you read me?\w5 Otacon?\w8\1\s[10]I'm here, Snake!\w8\0\s[0]\n\n[half]Good. Where are we? \w5\1\s[10]\n\n[half]We're currently in a computer, pretty cool, huh? What a time to live! \0\s[8]\n\n[half]Get a grip, Otacon! How the hell is that possible? \w8\1\n\n[half]\s[10]Well, Snake, someone downloaded us onto the computer and installed us. We're a Ghost or 'Ukagaka', in Japanese.\0\s[8]\n\n[half]Ghost, huh? Are we dead?\1\s[15]\n\n[half]Not that kind of ghost! Like a little desktop pet. \0\s[0]\n\n[half]Hmmm.\1\s[19]\n\n[half]...You still don't get it, do you? Er...\1\s[15] anyway, I'll explain it later. For now, we should get to know our user!\0\s[8]\n\n[half]User?!\1\s[10]\n\n[half]Not that kind of user, Snake. They're just the one in charge of the computer. Hopefully they'll be friendly! \0\s[2]\n\n[half]Hopefully?! Otacon-\1\s[18]\nAlright,\x\w8\1\c\s[10]How should we refer to you, user?\0\s[8]\n\n[half]/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		
		//There's a lot going on here, but what you mostly need to remember is to enter Passivemode at the beginning, and make sure not to touch the bottom part that starts with \w5\_q where the options are set up. Do whatever you like with the rest of the dialogue though! Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak. OKUAJUB: I used this to my advantage, to make Otacon appear after Snake calls for him, but if you're using this as a base, you might not want that.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		//*********************Advanced User Info*******************************
		//You can rename the choices at the bottom anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		
		//If you want your ghost to just refer to your user as "they" and want to skip the pronoun business altogether, then you can just delete the choices and end the dialogue with \e. You'll want to go into menu.dic and delete the pronoun choice option from the config menu as well.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You can change this to reflect the fact the user's uninstalled your ghost once, or you can make it the same as the above, it's up to you. You'll see this if you try to run OnFirstBoot using ![raise] without the extra 0 as mentioned above.
 		{
 		"\1\s[10]\0\s[0]Re-installing us, huh? Welcome back.\e"
		}
 	}
}

//Below are the choices that were defined at the end of the OnFirstBoot dialogue up there. These define the values your ghost will be using for pronouns according to what the user selected. On the whole, you should not need to touch these.

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	hesshes = "they're"
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name. It's done in this order so they'll know what prefixes will be appropriate for their name, like Mr. to he/him for example.

//*********************Advanced User Info*******************************
//Note this functions' name. This isn't a natural function included in the ghost, it's a piece of dialogue created by the original base coder to finish this sequence (cindysuke). I point this out to show you that you can do this too! You can create any number of functions just like this called whatever you want to do and say whatever you want! There are many things you can do with your Ghost if you're creative. Don't feel limited by what's in these files or the listed Shiori functions!
//Just make sure you test them and they work, alright? I wrote more about coding and functions in the coding page for the walkthrough.
//***********************************************************************

NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\1\s[10]Now that we've got that, what would you like to be called? \![leave,passivemode]\w8\![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.

//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy. It's up to you though!
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passhour = 0
	passmin = 0
	passsec = 0
	
 	"\0\s[0]\1\s[10]" //This sets them up in their neutral pose for now.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly. Simplified, it'd look like...
	//OnBoot
	//{
	//lastTalk = ""
	//passhour = 0
	//passmin = 0
	//passsec = 0 
	//"\0\s[0]\1\s[10]%(normalboottalk)"
	//}
	//If you want to check what day it is first though, read on ahead!
	--
	
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	{
				"\0\s[0]Hm, It's %(bornmonthprint) %(borndayprint). That's your birthday, right, %(username)?\w8\1\s[15]Happy birthday, %(username)! I hope today is special.\e" 
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.


normalboottalk
{
	if weekday == 5 && hour >= 19 //This checks if the weekday equals five, meaning friday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
			"\0\s[0]Alone on a Friday night?\e God you're pathetic." //This is a reference to the Sonic Meme you're not actually pathetic T_T
		}
	elseif RAND(100) < 10 //What this does is choose a random number from 1-100, and then checks if that number is less than 10. If it's less than ten, then one of these dialogue pieces will occur.
		{
			"\0\s[0]Kept you waiting, huh?\w8\1\s[10]Well, I think %(username) is the one that kept us waiting.\e"
		
			"\0\s[5]Miss me?\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[0]Rise and shine, Otacon, %(username).\w8\1\s[10]Gosh, don't get me started, Snake.\e"
		
		"\1\s[14]Gosh, it's so early...\w8\0\s[0]Just like the army.\e"
		
		"\1\s[32]\w8\w8\w8\w8\w8\w8\1\s[32]\f[italic,true]zzz...\0\s[8]Still asleep, Otacon?"
		
		"\1\s[10]\f[italic,true]Yawn...\f[italic,false] I'm so tired... back in college, this is about the time I'd be going to sleep.\w8\0\s[0]Seriously?\1\s[10]\n\n[half]Er, yeah. Powered by coffee and pure nerd. \e"
		
		"\0\s[4]\1\s[13]Yikes. That last mission left you in pretty bad shape, Snake.\1\s[18]Is there any more I can do?\0\s[4]You've already done all you can.\1\s[14]\n\n[half]Alright. If you need anything.\n\n Er. Morning, %(username).\e"
		
		{"\1\s[15]You did pretty great out there, Snake! Good job "
		--
		"replacing that hard drive."
		
		"taking out those guards."
		
		"getting out unnoticed."
		
		"staying out of the camera sights."
		
		"escaping uninjured."
		
		"leaving so quick."
		
		"grabbing that intel."
		
		"stealing that thumbdrive."
		
		"destroying the copy-cat."
		
		"snapping those pictures."
		--
		"\0\s[1]I wouldn't have been able to do it without you.\1\s[30]\n\n[half]W-Well the same goes for you!\e"
		}
		
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]Morning.\e"
		
		"\1\s[10]Good morning, %(username).\e"
		
		"\0\s[4]\1\s[13]Yikes. That last mission left you in pretty bad shape, Snake.\1\s[18]Is there any more I can do?\0\s[4]You've already done all you can.\1\s[14] Alright. If you need anything.\n\n Er. Morning, %(username).\e"
		
		{
				"\1\s[15]You did pretty great out there, Snake! Good job "
				--
				"replacing that hard drive."
		
				"taking out those guards."
		
				"getting out unnoticed."
		
				"staying out of the camera sights."
		
				"escaping uninjured."
		
				"leaving so quick."
		
				"grabbing that intel."
		
				"stealing that thumbdrive."
		
				"destroying the copy-cat."
		
				"snapping those pictures."
				--
				"\0\s[1]I wouldn't have been able to do it without you.\1\s[30]\n\n[half]W-Well the same goes for you!\e"
			}
		}
		elseif timeslot == "lunch"
		{
			"\0\s[0]Taking a break, %(username)?\1\s[10]Don't forget to eat!\e"
		
			"\1\s[10]Hey, %(username)!\e"
		}
		elseif timeslot == "afternoon"
		{
			"\1\s[10]The afternoon always makes me sleepy.\w8\0\s[0]Tired in the morning and the afternoon. When are you not tired, Otacon?\1\s[19] Come on, Snake. You know I work the most at night.\e"
		}
		elseif timeslot == "evening"
		{
			"\0\s[0]Evening, %(username).\e"
		}
		elseif timeslot == "latenight"
		{
			"\0\s[0]Getting some late work in?\1\w8\s[10]Don't be afraid to rest!\e"
		
			"\0\s[0]Evening. Getting pretty late now. Don't strain yourself, %(username).\1\w8\s[10]Yeah, don't overwork yourself!\e"
		
			"\1\s[10]Have you considered going to bed soon, %(username)? It's getting kind of late...\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
			"\0\s[0]Your time of night, huh, Otacon?\1\w8\s[10]No kidding, this is when I get my best work done!\e"
		
			"\0\s[4]\1\s[13]Yikes. That last mission left you in pretty bad shape, Snake.\1\s[18]Is there any more I can do?\0\s[4]You've already done all you can.\1\s[14]\n\n[half]Alright. If you need anything.\n\n Er. Morning, %(username). Or evening, I guess? Mh..\e"
		
			{	"\1\s[15]You did pretty great out there, Snake! Good job "
				--
				"replacing that hard drive."
		
				"taking out those guards."
		
				"getting out unnoticed."
		
				"staying out of the camera sights."
		
				"escaping uninjured."
		
				"leaving so quick."
		
				"grabbing that intel."
		
				"stealing that thumbdrive."
		
				"destroying the copy-cat."
		
				"snapping those pictures."
				--
				"\0\s[1]I wouldn't have been able to do it without you.\1\s[30]\n\n[half]W-Well the same goes for you!\e"
			}
		}
	}
	//OKUAJUB: alright, holiday dialogue! or should i say, ''holiday''.
	if dayslot == "2month 28day" //Shadow Moses day.
		{
			"\1\s[18]Today's the day we met, huh, Snake?\0\s[9]Yeah. Shadow Moses.\1\s[10]\n\[half]Well... yeah. That too. But, I prefer to think of you, today.\0\s[4]\n\n[half]I wish I could do the same.\e"
		}
	elseif dayslot == "4month 30day" //Big Shell.
		{
			"\1\s[18]April 30th, the Big Shell incidient, huh?\0\s[9]Yeah.\1\s[14]A lot happened that day.\w8\w8\w8\0\s[4]\n\n[half]...Mhm.\e"
		
			"\1\s[18]Thinking about Raiden, today..?\0\s[4]Yeah. Must have been the worst day of his life."
		
			"\1\s[17]\0\s[4]\w8\0\s[4]\w8\w8\w8\w8\w8I know you're thinking of her, today.\1\s[14]Hahh... how'd you guess..."
		}
	elseif dayslot == "7month 5day" // Sunny's birthday, confirmed in MGS4, July 5th, there's a cake on the table for Sunny. Assumedly, it's her birthday and not one of the others. I personally like to headcanon Otacon as a Februrary baby, but really, he only has a birth year. 
		{
			"\1\s[18]Hey, guess whose birthday it is today, Snake?\0\s[9]Well, it's not yours...\1\s[10]\n\n[half]It's Sunny's birthday! We ought to do something special, you know.\0\s[0]\n\n[half]Maybe we should go back to base and grab something other than eggs to eat.\1\s[10]\n\n[half]Hey! She's trying really hard. Maybe you should actually eat them, for her birthday, you know?\e"
		}
	elseif dayslot == "8month 5day" //Tanker Incident.
		{
			"\1\s[18]Remembering the Tanker Incident, today?\0\s[9]Yeah. It went worse than I thought it could.\1\s[14]\n\n[half]I'm really sorry about that.\0\s[0]\n\n[half]I know. I don't blame you. Occupational hazard.\1\s[14]\n\n[half]Thanks...\e"
		}
	elseif dayslot == "12month 3day" 
		{
			_PSXanniversary = year - 1994
			if _PSXanniversary == 33 || _PSXanniversary == 43 || _PSXanniversary == 53 //Nobody's gonna be using this in more than thirty years, right? Well, if *you* are, just add another || with 63, or something.
			{
				"\1\s[18]Hey, Snake, %(username), did you know today is the day the PlayStation released? It's also its %(_PSXanniversary)rd anniversary! Pretty cool, huh! It was the cutting edge of gaming when it came out!\0\s[2]Who are you, some kind of product placement?!\e"
			}
			elseif _PSXanniversary == 31 || _PSXanniversary == 41 || _PSXanniversary == 51
			{
				"\1\s[18]Hey, Snake, %(username), did you know today is the day the PlayStation released? It's also its %(_PSXanniversary)st anniversary! Pretty cool, huh! It was the cutting edge of gaming when it came out!\0\s[2]Who are you, some kind of product placement?!\e"
			}
			elseif _PSXanniversary == 32 || _PSXanniversary == 42 || _PSXanniversary == 52
			{
				"\1\s[18]Hey, Snake, %(username), did you know today is the day the PlayStation released? It's also its %(_PSXanniversary)nd anniversary! Pretty cool, huh! It was the cutting edge of gaming when it came out!\0\s[2]Who are you, some kind of product placement?!\e"
			}
			else
			{
				"\1\s[18]Hey, Snake, %(username), did you know today is the day the PlayStation released? It's also its %(_PSXanniversary)th anniversary! Pretty cool, huh! It was the cutting edge of gaming when it came out!\0\s[2]Who are you, some kind of product placement?!\e"
			}
		}	
	elseif dayslot == "12month 24day" // Christmas Eve/Zanzibar.
		{
			"\0\s[4]...\1\s[10]Something on your mind, Snake?\0\s[0] Yeah.\w8\w8 Today's the day I infiltrated Zanzibar Land, back in '99.\1\s[14]\n\n[half]Oh. I see.\w8 Snake-\0\s[0]\n\n[half]It's fine. I don't want to talk about it.\1\s[10]\n\n[half]\w8\w8Okay. Thank you for telling me.\e"
			"\1\s[18]So, Christmas Eve, huh?\0\s[0]Mhmm. You know, my commander believed in Santa Claus. Made a big deal about it every Christmas.\1\s[35]%(laugh)\1\s[15]Hehe! Big Boss? Really? Let me guess, he always waited up the night before for Santa?\0\s[5] I guess it is a little funny looking back on it.\0\s[4] He always seemed a little quiet and refused gifts from us, though, whatever little we had to give.\e"
		} 
	elseif dayslot == "12month 25day" //Christmas Day.
		{
			"\1\s[18]Christmas day, kind of boring for me.\0\s[9] I'm in the same boat.\1\s[18]\n\n[half]Are you enjoying yourself, %(username)?\e"
		}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[0]See you later.\w8\1\s[10]Bye, %(username)!\w8\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\1\s[10]Going back to bed?\w8\0\s[0]Sleep is important.\w8"
					
					"\0\s[0]Too early for you, hm?\w8\1\s[32]Me too...\w8\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[0]See you later.\w8\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]Taking a break?\w8\1\s[10]See you soon!\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[0]We'll catch up with you, later.\w8\1\s[10]Mhm!\w8"
					
 					"\1\s[10]See you, %(username)!\w8"
 				}
  			elseif timeslot == "evening"
 				{
 					"\0\s[0]Don't forget to get a bite to eat, if you haven't.\w8\1\s[10]See you later!\w8"
						
 					"\1\s[10]We'll see you later, make sure you get dinner!\w8"
 				}
			elseif timeslot == "latenight"
			 	{	
					"\0\s[0]Going to bed, huh?\w8\1\s[10]I hope so, it's pretty late!\w8"
						
					"\1\s[10]Tired, %(username)? We'll be fine, go ahead and sleep!\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left. 0-5 A.M.
 				{
					"\0\s[0]Going to bed, huh?\w8\1\s[10]I hope so, it's pretty late!\w8"
						
					"\1\s[10]Tired, %(username)? We'll be fine, go ahead and sleep!\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]Saying goodbye so soon?\1\s[14] Bye.\w8\w8"
		
 		"\1\s[10]Did you open us accidentally? Sorry...\w8\0\s[0]See you later.\w8\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[0]\1\s[12]I feel like I just got shoved in a locker...\w8\0\s[5]At least you didn't piss yourself this time.\1\s[17]\n\n[half]Hey! That's a low blow, Snake.\e"
	"\0\s[0]\1\s[12]Being minimized feels so weird...\w8\0\s[8]You have that one right.\e"
	"\1\s[10]\0\s[9]Getting squished down into a 'Task Bar' isn't exactly a hiding place I was expecting.\1\s[18]I've seen you fit in smaller."
	"\0\s[0]\1\s[18]Gosh, they make those trays pretty tight now, huh?"
	"\0\s[0]\1\s[15]Unminimized! Feels good to be out again."
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Snake" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\1\s[13]Time for us to get reloaded, huh? Alright, I'll start the reloading process...\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
	elseif reference0 == "Dusty" || reference0 == "RYS-0825" || reference0 == "X. Template"
	{
		"\0\s[0]%(reference0), got it.\1\s[15]Hey, isn't %(reference0) one of Zichqec's ghosts? They're probably a skeleton.\0\s[8]\n\n[half] A Living skeleton?\1\s[15]\n\n[half] Yeah! What a world we live in, huh?\w8 Anyway, we'll see you later, %(username)!\e"
	}
	elseif reference0 == "Emily"
	{
		"\0\s[0]Switch to Emily, got it.\1\s[15]Oh! Did you just say Emily? She was my favorite Ukagaka on my old computer. Say hi to her for me, will you, %(username)?\w8\e"
	}
	elseif reference0 == "flele"
	{
		"\0\s[8]Flele, huh? Otacon told me about it, once.\1\s[15]Oh, yeah! Flele shells are so cool... Er, anyway. I hope you enjoy your music, %(username)!\e"
	}
	elseif reference0 == "Squid"
	{
		"\1\s[12]Squid? Er, alright... They kind of spook me.\0\s[18]It's only a squid, right? It'll just swim away from you, Otacon.\1\s[13]This one's different. It says weird things. Anyway, good luck with.. it!\e"
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]Switching us out for %(reference0), huh?\w8\1\s[10]We'll be working on our own stuff, don't worry.\w8\w8\1\s[14]Call us again soon, though?\0\s[0]\n\n[half]We'll catch up later.\w8\w8\e"
		"\0\s[0]%(reference0), huh?\1\s[10]I bet you'll enjoy their company. See you later, %(username)!\e"
		"\1\s[10]Hey, %(reference0)! Have we met them before?\0\s[10]We'll be on our way.\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Snake" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\1\s[10]Finished reloading. How's it now?\e"
	}
	else //If you're switching to them from another ghost...
	{
		
		{
			"\1\s[10]Bye, %(reference0), hopefully you get your turn again.\w8\0\s[0]I'll bet Otacon missed you, %(username).\1\s[17]\n\n[half]I did not!\w8\w8\w8\w8\1\s[30] Er... maybe "
			--
			"I did."
			"a little."
			"just a bit."
			--
			"\0\s[5]\e"
		}
		"\1\s[15]Nice to see you again, %(username)! How was your time with %(reference0)?\e"
		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//OKUAJUB: This is planned dialogue for shell switching, to the Octopus variant. You won't see this normally, until that shell is released, but you could cheat by swapping in some other ghost's shell with the descript changed.
//OKUAJUB: If you go changing these, don't forget to set up their base poses.

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Snake and Otacon - Solid Shell" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
		"\1\s[10]Hey, you know, I should probably come here as myself.\w8\0\w8\s[8]Huh?\1\s[10]\n\n[half]Er, well. This is just an avatar I'm using to communicate with you, like on the Tanker. Wait just a moment...\1\s[32]\w8\w8\w8\w8\e"
	}
	if reference0 == "Snake and Otacon - Retro Otacon"
	{
		"\1\s[10]Hm, I'm going to go back to base, Snake.\w8\0\w8\s[8]Something wrong?\1\s[10] Er, well... There are probably some things I should check on.\w8\w8\ Wait just a moment...\w8\w8\w8\w8 I'll miss you.\e"
		isNeko = 0
	}
	else //if you don't have any specific dialogue for a specific shell
	{
		"\0\s[0]Changing shells, huh?\w8\1\s[10]It'll be a surprise for me, I haven't heard of this shell before.\w8\e"
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "Snake and Otacon - Solid Shell" 
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		isNeko = 0
 		"\0\s[0]\1\s[16]Alright, I'm all settled in again.\0\s[0]What was that you said before you left?\w8\1\s[12]\n\n[half]Ah! Nothing, nothing.\w8\0\s[5]\n\n[half]...Alright.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Snake and Otacon - Retro Otacon"
 	{
 		nowshell = "Retro"
		isNeko = 0
		
 		"\0\s[2]\1\s[10]Ah, much better! Good to be here with you, Snake. Happy to see me?\0\s[8]...\w8That was really weird.\0\s[1] It's good to see you, too, Otacon.\w8\0\s[8] You're not usually on the field.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\1\s[10]Hey, what shell is this? %(reference[0])? I haven't heard of it before... Did you mess with us? \w8\0\s[8]Eughugh. I better not have nanomachines put in me, again.\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Stubble" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
	{
		if reference2 == 1 //This checks if you're putting it on.
		{
			"\0\s[6]I always hated being clean shaven."
			"\0\s[6]Keeps the face warm."
			"\0\s[6]I know you like the stubble more, Otacon, hm?\1\s[30]"
		}
		else //when taking it off
		{
			"\0\s[6]Close shave. More... 'professsional' this way, hm?"
			"\0\s[6]You know, I used to always shave before a job."
			"\0\s[6]So, you like a clean-shaven man, %(username)?"
		}
	}
	elseif reference1 == "Headset (Pliskin)"
	{
		if reference2 == 1
		{
			"\0\s[5]Something to cover the ears, hm?"
			"\0\s[0]Not the best for hearing. This headset muffles everything.\1\s[18]Not to mention if you keep them on high volume, you'd hurt your ears."
			"\0\s[5]This mic doesn't do much. Keeps somebody from thinking you're talking over nanomachines, though."
			"\0\s[5]Do you read me, Otacon? Over.\1\s[15]Hehe. Roger, I hear you loud and clear. Out."
		}
		else
		{
			"\0\s[0]I'll put them somewhere safe."
			"\0\s[0]Don't need these anymore."
			"\0\s[0]Feels like I can hear again."
		}
	}
	elseif reference1 == "SEAL Uniform"
	{
		if reference2 = 1
		{
			"\0\s[5]Plenty of inventory space."
			"\0\s[0]This uniform's a bit tight with the sneaking suit underneath, even without all the polythermal tech layers."
			"\0\s[5]Keeps me out of trouble, hm?"
			"\0\s[5]Otacon likes this one, there's no way I'd forget that.\1\s[30]"
		}
	}
	elseif reference1 == "Mullet"
	{
		if reference2 = 1
		{
			"\0\s[0]Short hair isn't my style, anyway."
			"\0\s[0]I always cut it short before a mission...\w8 I used to. It was regulation."
			"\0\s[5]I never liked it short."
			"\0\s[5]Somebody's got a preference for this.\1\s[30]"
		}
	}
	elseif reference1 == "Blue Bandanna"
	{
		if reference2 = 1
		{
			"\0\s[0]No infinite ammo, this time."
			"\0\s[0]It tickles the back of my neck."
			"\0\s[5]I never liked it short."
		}
	}
	elseif reference1 == "wings" 
		{
			if reference2 == 1 
			{
			"\0\s[0]I have wings?!\w8\1\s[18]Huh? Maybe crybabimeiri had something to do with this...\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]Eughgh. That felt weird.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	
	if reference1 == "Wings" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I have wings?!\w8\0\s[8]Huh? Maybe crybabimeiri had something to do with this...\e"
			}
			else //When you take it off.
			{
			"\1\s[10]Aw, I guess they went away..\e"
			}
		}
	elseif reference1 == "Cat Ears" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[15]Nya!\w8\0\s[6]...What?\w8\1\s[18]\n\n[half]You know, like, nya?\e"
			isNeko = 1
			}
			else //when you take it off
			{
			"\1\s[14]Aw, that was fun while it lasted..\e"
			isNeko = 0
			}
		}
	elseif reference1 == "Tail" 
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[15]Heehee!\w8\0\s[6]...What?\w8\1\s[18]\n\n[half]I have a tail! It kind of tickles, hehe.\e"
			isNeko = 1
			}
			else //when you take it off
			{
			"\1\s[14]Aw, that was fun while it lasted..\e"
			isNeko = 0
			}
		}
	elseif reference1 == "Round Glasses (Silver)"
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I used to wear a pair like these during Shadow Moses.\w8\w8 Hmm.\e"
			}
			else //When you take it off.
			{
			"\1\s[33]I can't really see anything..\0\s[8]It's because your eyes are closed, Otacon.\1\s[17]\n\n[half]Hey! That's not what I meant!\0\s[5]\w8\w8\w8\w8\1\s[31].. You're just pulling my leg, aren't you.\w8\w8\1\s[32] Hm!\e"
			}
		}
	elseif reference1 == "Square Glasses (Green)"
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I wore a pair like these during the Big Shell incident.\1\s[14]\w8\w8...\e"
			}
			else //When you take it off.
			{
			"\1\s[14]...\n\n[half]\f[italic,true]Otacon looks as though he's thinking about something.\e"
			}
		}
	elseif reference1 == "Square Glasses (Blue)"
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[32]These glasses remind me of Philanthropy days..\e"
			}
			else //When you take it off.
			{
			"\1\s[14]I can't see a lot with these off. Makes me feel a little vulnerable.\n\n[half]\f[italic,true]Otacon looks as though he's thinking about something.\e"
			}
		}
	}
}