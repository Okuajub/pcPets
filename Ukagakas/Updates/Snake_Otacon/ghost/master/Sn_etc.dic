//---------------------------Miscellaneous Functions--------------------------

//This .dic file is concerned with a number of functions that didn't quite fit in anywhere else. If you're adding new functions, this may be the place to do it! This also has the functions related to updating your ghost, among others. Most of this will just be replacing placeholder dialogue with dialogue more appropriate for your ghost, and this file is fairly long. On the positive side, you'll probably only have to go through it once.
//Make sure to read the walkthrough page (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OnFileDrop2

//OnFileDrop2 handles how your ghost will set an image as the desktop background when someone drags and drops an image on them. You don't need to touch any of the coding here, just replace the dialogue as needed and leave the \q options alone. More about \q options in bootend.dic and in the walkthrough.

OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png" //These are the formats your ghost will recognize as image files to set as the background.
		{
			if OtaconIsBusy
			{
				"\1\s[38]Sorry, %(username), I'm a bit busy right now.. Can I set your wallpaper later?\e"
			}
			else
			{
				Wallpaperfile = reference0
				
				"\1\s[10]"
				--
				"Would you like me to set this as your wallpaper? It's %(_filename)%(_fileext).\w8\1\s[10]I can set it a couple different ways. Which way would you like it?\n\n[half]/
				\![*]\q[Centered,SetWallpaper_0]\n/
				\![*]\q[Tiled,SetWallpaper_1]\n/
				\![*]\q[Stretched,SetWallpaper_2]\n\n[half]/
				\![*]\q[No thanks,SetWallpaper_Cancel]\e"
			}
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au" //Other file formats you might want to give your ghost a specific response to.
		{
			if OtaconIsBusy
			{
				"\1\s[38]%(_filename)%(_fileext) is an audio file. Sorry, I'm not a flele, I can't play music.\e"
			}
			else
			{
				"\1\s[10]%(_filename)%(_fileext) is an audio file. Sorry, I'm not a flele, I can't play music.\0\s[0]You'd make a cute idol singer, though.\1\s[11] Pff, hey!\e"
			}
		}
		others //Any other file format. As a note here, if you drop something ghost-related on them that does not have an install.txt, then they won't install it and will just say this response. If you are testing your balloon or nar files and you get this response instead of a proper installation, you should check and make sure you have an install.txt in the file!
		{
			if OtaconIsBusy
			{
				"\1\s[38]"
			}
			else
			{
				"\1\s[10]"
			}
			--
			"This is %(_filename)%(_fileext). Sorry, I can't do anything with this.\e"
		}
	}
}

//This set of options sets the wallpaper up. You can replace the dialogue, but make sure to leave the \![set,wallpaper, etc.] tag at the beginning.

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center]\1\s[10]I've centered the image to your desktop. Does it look alright?\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile]\1\s[10]I've tiled the image to your desktop. Does it look alright?\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]I've stretched the image to your desktop. Does it look alright?\e"
}
Select.SetWallpaper_Cancel
{
	"\0\s[0]Changed your mind?\1\s[10]Alright! I've canceled the wallpaper change.\e"
}


 //---- OnInstallBegin -------------------------------------------------------
 //OnInstallBegin is called when a file with an included install.txt is dropped on your ghost. This primarily means things like .nar files for other ghosts or .zip files containing balloons or shells for your ghosts. Primarily ghost-related things. Replace as you want.
 
OnInstallBegin
 {
	if OtaconIsBusy
	{
		"\1\s[38]Looks like this .zip or .nar contains an install.txt file. I'll get it set up for you...\e"
	}
	else
	{
		"\0\s[0]Installing something new, huh?\w8\1\s[10]This .zip or .nar contains an install.txt file, I'll get it set up!\e"
	}
 }

 //---- OnInstallComplete -------------------------------------------------------
 //OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
 {
	"\1" //this means your side character will be speaking first, therefore the \s[] at the beginning of each line will be defining your side character's pose.
 	--
	if reference0 == "shell" //This is checking to see if what you installed is classified as a shell in the install.txt. Remember the line in install.txt that said type,ghost or type,shell? This is why that line is important, that's what tells the program what it's installing like so.
 	{	
		if reference1 == "Snake and Otacon - Solid Shell" //This is the name of your shell as you defined in descript.txt in the shell folder.
		{
			if OtaconIsBusy
			{
				"\s[38]We've installed the Solid Shell.\1\s[15] Sweet! This shell is the most current look for us. It'll also let me show up as myself in person!\e"
			}
			else
			{
				"\s[10]We've installed the Solid Shell.\1\s[15] Sweet! This shell is the most current look for us. It'll also let me show up as myself in person!\e"
			}
			//Replace if needed.
		}
		else //For any other shell they may install.
		{
			if OtaconIsBusy
			{
				"\s[38]We've installed a new shell. \w8It's called  %(reference1), just so you know. \n\nOkuajub didn't make this one, is it for another ghost?\e"
			}
			else
			{
				"\s[10]We've installed a new shell. \w8\1\s[10]It's called  %(reference1), just so you know. \n\n\1\s[18]Okuajub didn't make this one, is it for another ghost?\e"
			}
			//%(reference1) here would be the name of the shell they installed. Replace if needed.
		}
 	}
	elseif reference0 == "ghost" //if the type of the file they're installing is a ghost.
 	{
		if OtaconIsBusy
		{
			"\1\s[38]All up and running. Welcome, %(reference1)!"
		}
		else
		{
			"\0\s[0]New Ghost, huh?\w8\1\s[10]All up and running. Welcome, %(reference1)!\e"
		}
		//Reference1 here would be the name of the ghost. Replace as needed.
 	}
	elseif reference0 == "balloon" //if the type of file is a balloon
 	{
		if OtaconIsBusy
		{
			"\1\s[38]Alright, the balloon is set up. \w8\1\s[38]It's called %(reference1).\e"
		}
		else
		{
			"\0\s[0]We've installed a new balloon.\w8\1\s[10]It's called %(reference1).\e"
		}
		//Reference1 here would be the name of the balloon. Replace as needed.
 	}
	elseif reference0 == "plugin" //if the type of file is a plug-in, like a saori of some kind.
 	{
		if OtaconIsBusy
		{
			"\1\s[38]Alright, the plug-in is set up. \w8\1\s[38]It's called %(reference1).\e"
		}
		else
		{
			"\0\s[0]We've installed a new plug-in.\w8\1\s[10]It's called %(reference1).\e"
		}
		//Reference1 here would be the name of the plug-in. Replace as needed.
 	}
	elseif reference0 == "calendar skin" //if the type of file is a calendar skin
	{
		if OtaconIsBusy
		{
			"\1\s[38]Alright, the calendar skin is installed. \w8\1\s[38]It's called %(reference1).\e"
		}
		else
		{
			"\0\s[0]We've installed a new balloon.\w8\1\s[10]It's called %(reference1).\e"
		}
	}
	else //for any other file they'd install
	{
		if OtaconIsBusy
		{
			"\1\s[38]Alright, %(reference1) has been set up!\e"
		}
		else
		{
			"\s[10]We installed %(reference1)."
		}
	}
}

//---- OnInstallFailure -------------------------------------------------------
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
 {
	if OtaconIsBusy
	{
		"\1\s[38]Huh, the installation failed...\n\n[half]\w5" //this first bit of dialogue begins the explanation of what happened. You can replace this with an appropriate intro statement.
		--
		if reference0 == "unsupported" //These if statements determine how it happened to finish the piece of dialogue. This checks if the reason it failed is because it was unsupported.
		{
		"This file is unsupported.\1\s[38] Sorry, %(username), I can't install this.\e"
		//Replace with whatever dialogue for an unsupported file you may come up with.
		}	
		elseif reference0 == "extraction" //This checks if the file didn't extract properly.
		{
		"The file couldn't be extracted properly. \1\s[38]Sorry, %(username).\e"
		//See above but for a failed extraction.
		}
	}
	else
	{
		"\1\s[18]Huh, the installation failed.\n\n[half]\w5 \0\s[8] Why?1\s[18]" 
		--
		if reference0 == "unsupported"
		{
		"This file is unsupported.\1\s[37] Sorry, %(username), I can't install this.\e"
		}	
		elseif reference0 == "extraction"
		{
		"The file couldn't be extracted properly. \1\s[37]Sorry, %(username).\e"
		}
	}
 }
 
 //--OnInstallRefuse
 //If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
 {
	if OtaconIsBusy
	{
		"\1\s[38]We can't use this. The install refused. \w4It may be for %(reference0) instead?\e"
	}
	else
	{
		"\1\s[37]We can't use this. The install refused. \w4It may be for %(reference0) instead?\e"
	}
	//reference0 in this function refers to the ghost this file is associated with, probably the name of the ghost listed in its install.txt file. You would see this if you dropped a shell made for a different ghost on your current ghost, for example. They can't install a shell for themselves they can't use, right? Anyway, replace this with what you wish, you can use the reference0 envelope or not if you want.
 }


//**** Uninstallation ******************************************
//You may have noticed in the configuration menus in menu.dic an option to turn Uninstall on or off, as well as a greyed out option to uninstall in the right click menu. These following functions relate to the uninstallation process when it's on. Replace the dialogue in each function as we go along.


//--OnVanishSelecting
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	if OtaconIsBusy
	{
		"\1\s[38]Wait a second, I'm not sure if you uninstall now that we'll be stable if you ever reinstall. You should wait for our task to finish and then try."
	}
	else
	{
		"\1\s[10]Hey, thinking of uninstalling?\w8\0\s[8]Be careful about what you click here, hm?\1\s[18] Make sure that you really want to uninstall, the entire ghost will be deleted!\e"
	}
	
}

//OnVanishSelected
//When you decide to uninstall them. 

OnVanishSelected
{
	"\0\s[0]Uninstallation, hm? Alright. Otacon, you know what to do.\1\s[33] Yeah, one second...\w8\1\s[14] "
	--
	if otaconFeelings > 20
	{
		"Bye. I'll miss you, %(username).\w9\w9\e"
	}
	elseif otaconFeelings < -20
	{
		"Whew, I'm glad to be out of here..."
	}
}


//--OnVanishCancel
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	"\1\s[12]Thank goodness, I'm not sure if I'm ready for that...\e"
}

//--OnVanishButtonHold
//This should trigger if you double click the ghost's balloon in the middle of OnVanishSelected above. So it basically cancels their uninstallation. I'd be pretty careful about testing this, and I'd probably just put the line of dialogue into their script input and test it that way instead.

OnVanishButtonHold
{
	"\1\s[10]Whew, decided against uninstalling?\e"
}


 //---- OnVanished -----------------------------------------
 //OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. This is very annoying to test as you can imagine! But unlikely to come up super often, I bet. You might as well be thorough and fill this out as well. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
 {

	if OtaconIsBusy
	{
		"\1\s[38]Mm.. %(reference0). Maybe they'll be okay.\w8\w8...."
		--
		if missionTimer > 0 && missionTimer != "finished"
		{
			"I hope Snake makes it back.\e"
		}
	}
	{
		"\0\s[0]\1\s[10]Hey, looks like you just uninstalled %(reference0). Maybe they'll be okay.\w8\0\s[6]Just another person, committed only to memory.\e"
	}
	
	//reference0 here is the name of the other ghost.
}


//**** Mail Checking *******************************************************************
//The next set of functions have to do with checking your email. This function is a slippery little thing - I've had people test it following my directions and have it work, but I've never actually gotten it to report back the right amount of emails myself. Very frustrating. But perhaps you'll have more luck with it, haha.
//Girl and Triangle can't actually read your email, they can just tell you how many emails you have. I've seen ghosts that can read the HEADERS of email, but I still don't think ghosts can actually display the contents of an email. You should be using your actual email client for that. It's still kind of a neat feature though.


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//If you want to set up your ghost to check your mail so you can more easily check these messages instead of just writing the dialogue and moving on, it's a little bit tricky, but not super hard.
//Basically, you're going to need to find your POP settings for your email account. Googling your provider + POP should bring it up pretty quick. Once you have the info, you'll go to the right click menu, options, then preferences. A big menu should pop up, and you should see POP in the left side. Click that, and input all the info from the POP page you looked up for your account. Tell your ghost to check your email, and if it works, then congratulations!
//***********************************************************************


 //---- OnBIFFBegin ---------------------------------------------------------------
 //When you first tell the ghost to check your email. An intro statement, if you will. Replace with whatever you like.
 
OnBIFFBegin
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\1\s[18]"
	}
	--
	"Alright... let's see if you have any messages.\w8\e"
	
	"Got it, I'll check your inbox...\w8\e"
	
	"I'll connect to the email server.."
	
 }

 
 //---- OnBIFFComplete ---------------------------------------------------------------
 //After they've succeeded in checking your mail, they'll report back with how many new emails you have. Replace the dialogue with whatever would be character appropriate.
 
OnBIFFComplete
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\1\s[10]"
	}
	--
	if reference0 == 0 //If you have no new mail.
 	{
 		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[37]"
		}
		--
		"There is no new mail. Sorry.\e"
	}
	elseif reference0 == 1 //If you have one new email.
 	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[10]"
		}
		--
 		"There is one new email. Must be pretty important to be the only one, huh?\e"
	}
	elseif reference0 > 1 && reference0 < 11 //If you have more than one email but less than eleven.
	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[10]"
		}
		--
		"There's %(reference0) emails. You keep it pretty tidy, huh?\e"
		//reference0 here stores the amount of new email it finds.
	}
	elseif reference0 > 100 //If there are over one hundred new emails.
	{
		if OtaconIsBusy
		{
			"\1\s[38]There are %(reference0) emails unread. Jeez, this is like Snake's inbox with how many spam lists he signs up to accidentally."
		}
		else
		{
			"\1\s[10]There are %(reference0) emails unread. Jeez, this is like Snake's inbox with how many spam lists he signs up to accidentally.\w8\0\s[9]How was I supposed to know those weird pop-ups would email me every day?\e"
		}
	}
 	else //For any other number of emails.
	{
		"\1There's %(reference0) emails.\e"
 	}
}

 //---- OnBIFFFailure ---------------------------------------------------------------
 //Various error messages that can happen when your ghost tries to connect to an email account. Replace the dialogue as appropriate.
 
OnBIFFFailure
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\1"
	}
	--
	if reference0 == "timeout" //If the connection times out.
 	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[37]"
		}
		--
 		"The connection timed out. Sorry.\e"
	}
 	elseif reference0 == "kick" //If the account blocks the ghost from accessing it.
	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[18]"
		}
		--
		"Weird, I can't access the account. I could try and hack in but... maybe try checking some settings on your end, first, %(username)?\e"
 	}
	elseif reference0 == "defect" //If the information put into the POP menu is wrong.
 	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[37]"
		}
		--
 		"Huh. I can't get in. The email account wasn't set up properly. I can't access it until you fix it, sorry. \w8\1\s[18]It can be reset at the POP menu, though. I'll open it up for you.\w8\![open,configurationdialog]\e"
		
		//Note that this ends with \![open,configurationdialog]. This will open up the preferences menu I described above automatically. More on \! functions in the walkthrough. You can delete the \! tag here if you want to.
	}
 	else //if there's some other kind of error.
	{
		if codecTimer == "" || missionTimer == ""
		{
			"\1\s[37]"
		}
		--
		"I can't connect with the account.\w8\1\s[18]The error it returned is '%(reference[0])'. Sorry, %(username).\e"
		
		//reference0 here stores the error message the email server would have given the ghost, hopefully.
 	}
}


 //**** Network Update *****************************************************************
 //The following functions are for the Network Update of your ghost, where it will connect to your website, check for new files, and update itself. This is a handy feature, but tricky to set up. If you have no intention of using Network Update, you can disregard these, but it won't hurt to fill them out anyway just in case. More details about how to set up Network Update are in the walkthrough (http://www.ashido.com/ukagaka/).
 
 //Replace the dialogue in the next set of functions as appropriate. You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process. I highly recommend doing this at LEAST once if you're going to use this feature to make sure it flows well.

 
 //---- OnUpdateBegin -------------------------------------------------------------
 //When you first tell your ghost to update. An introductory statement, like OnBIFFBegin above. Replace or add more dialogue as appropriate. Note that they end with \w8 to give a little breather time.
 
OnUpdateBegin
 {
	if OtaconIsBusy
	{
		"\1\s[38]Just so you know, because I'm working on this while updating, things might get a little unstable... If you run into any issues, make a bug report from my menu, OK?"
	}
	else
	{
		"\1\s[16]I'll start the update process, I gotta find some files on the web, wait just a second...\w8\1\s[32]\w8\e"
	}
 }

 //---- OnUpdateReady ---------------------------------------------------------
 //If the ghost finds new files to update with.
 
OnUpdateReady
 {
	reference0++ //makes sure it starts at 1 instead of 0
	
	if OtaconIsBusy
	{
		"\1\s[38]I found %(reference0) new files. Let's hope I don't get any bugs, right? Trying to get rid of lice when it went through my school as a kid was lousy enough!\w8\e"
	}
	else
	{
		"\1\s[15]I found %(reference0) new files. Nice!\w8\e"
	}
	
	//reference0 here storing the number of new files. You don't have to use it if you don't want to.
 }


//---- OnUpdateComplete -------------------------------------------------------------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	
	UpdateInitializeVar

	if OtaconIsBusy
	{
		if reference0 == "none" //if the ghost had nothing to update with
		{
			"\1\s[38]Huh, no new files. Are you sure anything needs to be updated?\e"
			
			"\1\s[38]I can't find any new files to update with. Sorry.\e"
		}
		else //if the ghost has updated successfully
		{
			"\1\s[38]Alright, update successful! Enjoy the new features.\e"
		}
	}
	else
	{
		if reference0 == "none" //if the ghost had nothing to update with
		{
			"\1\s[18]Huh, no new files. Are you sure it needs to be updated?\e"
			
			"\1\s[37]I can't find any new files to update with. Sorry.\e"
		}
		else //if the ghost has updated successfully
		{
			"\1\s[15]Nice! Update successful! Enjoy the new features.\e"
		}
	}
	
}

 //---- OnUpdateFailure -------------------------------------------------------------
 //Error messages if the update process fails in some way.
 
OnUpdateFailure
 {
	if OtaconIsBusy
	{
		if reference0 == "timeout" //if the connection times out
		{
			"\1\s[38]The update connection has timed out. Sorry.\e"
		}
		elseif reference0 == "md5 miss" //This is the final message displayed when you've run into an md5 error below at some point.
		{
			"\1\s[38]The MD5 hash of the files don't match. Sorry.\e"
		}
		else //for other errors
		{
			"\1\s[38]The update couldn't be completed. Sorry.\w8\0\s[0]The error is '%(reference0)'.\e"
		}
	}
	else
	{
		if reference0 == "timeout" //if the connection times out
		{
			"\1\s[37]The update connection has timed out. Sorry.\e"
		}
		elseif reference0 == "md5 miss" //This is the final message displayed when you've run into an md5 error below at some point.
		{
			"\1\s[37]The MD5 hash of the files didn't match. Sorry.\e"
		}
		else //for other errors
		{
			"\1\s[37]The update couldn't be completed. Sorry.\w8\0\s[0]The error is '%(reference0)'.\e"
		}
	}
 }


 //---- OnUpdate.OnDownloadBegin ------------------------------------------------
 //This dialogue plays when they begin downloading a new file. WARNING: if you have big plans for your ghost and are going to make a lot of new image files for it (like... i do, cough) at some point, you're going to want to make these messages very brief, if you even have them at all. The reason is because the user will see these messages for EVERY individual file that they have to download, and if you have, say, 50 pna files in the queue, they will see this dialogue 50 times. Not only that, but displaying the dialogue takes some time, so it also extends the download process.
 //If you aren't planning on adding a ton of files at any point, or are only intending to update the .dic files which will be at most a handful of files, then you can go ahead and put a short message in here. But if your ghost is going to grow in leaps and bounds as you work on it, try and keep these messages as brief as possible (or again, just make it "" to have there be no message at all) to make the process that much faster for your user.
 
OnUpdate.OnDownloadBegin
 {
 	if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue. If you want to have a specialized bit of dialogue for each type of file, you can expand this with elseifs and by replacing aitalk with whatever file you have in mind. Keep in mind my warning above though.
 	{
 		"" // I decided against adding anything here, they have plenty of dialogue before downloading, anyway, and it'd probably just be annoying if it played multiple times.
 	}
 	else //for files not specified above
 	{
		""
	}
 }

 //---- OnUpdate.OnMD5CompareBegin ---------------------------------------------------
 //This checks the hash value of the files in the directory and the files listed in updates.dau, I believe. It will do this for every file the user downloads, so I again remind you of my warning above! For every file they download, they will have to go through three sets of unique dialogue, and it can get old fast. Not to mention it slows things down a lot. Again, I would recommend keeping this very brief, if not just replacing it with "..." or "" instead.
 
//OnUpdate.OnMD5CompareBegin
 //{
	// I found out this slows the update process a LOT. I highly suggest against adding this event into your ghost. I've deleted the other MD5 events and am only keeping this one as a warning.
 //}
 
 //**** Headlines and RSS Feeds *********************************************************
 //This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
 //The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. I've very rarely ever messed with them or used them. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

 //---- OnHeadlinesenseBegin -----------------------------------------------------------
 //This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far. Replace as you need.
 
OnHeadlinesenseBegin
 {
	if OtaconIsBusy
	{
		"\1\s[38]I'll go ahead and get the headlines from %(reference0) for you.\e"
	}
	else
	{
		"\0\s[0]%(reference0), huh? Got it.\e"
	}
 }

 //---- OnHeadlinesense.OnFind --------------------------------------------------------
 //This actually displays the feed. My set-up for it is pretty simple but gets the job done, it just has the name of the feed, a line space, then a list of links. You shouldn't have to edit any of these and I probably wouldn't honestly. (FUTURE OKUAJUB: Aha, that's where you're wrong... because I set up a needlessly complicated system for myself!) 

OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		if OtaconIsBusy
		{
			"\1\s[38]\b2%(reference0):"
		}
		else
		{
			"\0\b2\s[0]%(reference0):"
		}
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		if OtaconIsBusy
		{
			"\1\s[38]\b2%(reference0):"
		}
		else
		{
			"\0\b2\s[0]%(reference0):"
		}
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		if OtaconIsBusy
		{
			"\1\s[38]\b2%(reference0):"
		}
		else
		{
			"\0\b2\s[0]%(reference0):"
		}
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	if OtaconIsBusy
	{
		"\1\s[38]Alright, I'll close the headlines then."
	}
	else
	{
		"\0\s[0]All done?\e"
	}
}

 //---- OnHeadlinesenseComplete -------------------------------------------------------
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	if OtaconIsBusy
	{
		"\1\s[38]No update. %(reference0).\e"
	}
	else
	{
		"\0\s[0]No update. %(reference0).\e"
	}
	//reference0 here supposedly always stores the value no update? Again this isn't hugely clear from what I can see. Anyway, this dialogue has never come up for me while using a ghost, so perhaps someone else who runs into it can offer more clarity. For now, you can leave it as is, or write up something else in here if you like.
 }

 //---- OnHeadlinesenseFailure ---------------------------------------------------------
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
  {
	if OtaconIsBusy
	{
		"\1\s[38]Huh. The feed can't be updated.\w8\1\s[10]That's weird... Why not..\w8\n\n[half] "
		--
		if reference0 == "can't download" //if they can't download the rss feed for some reason
		{
			"Aha. It can't be downloaded."
		}
		elseif reference0 == "can't analyze" //if they can't read the file for some reason
		{
			"Aha. It can't be analyzed. That means I can't read it."
		}
		else //other errors
		{
			"This is awkward. I have no idea why it broke. Sorry?"
		}
		--
		"\e" //And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
	}
	else
	{
		"\0\s[0]The feed can't be updated.\w8\1\s[10]That's weird. Why not?\w8\0\s[0]\n\n[half]" //This sets up an exchange between the two characters. The final part of the exchange continues below in the if statements.
		--
		if reference0 == "can't download" //if they can't download the rss feed for some reason
		{
			"It can't be downloaded."
		}
		elseif reference0 == "can't analyze" //if they can't read the file for some reason
		{
			"It can't be analyzed. That means I can't read it."
		}
		else //other errors
		{
			"I don't know.\1\s[19] Very helpful, Snake.\0\s[18] Well do you have anything better?\1\s[30] Er....\w8\w8 no."
		}
		--
		"\e"
		}
	}
	


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you can drag and drop another ghost's folder onto them and they'll also create a nar for that as well, if for some reason you want to do that.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\1\s[18]"
	}
	--
	"Creating the updates2.dau file...\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
 {
	if OtaconIsBusy
	{
		"\1\s[38]Successfully created updates2.dau. Good luck, %(username)."
	}
	else
	{
		"\0\s[0]Successfully created updates2.dau. What the hell does that mean?\e"
	}
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\1\s[18]"
	}
	--
	"Got it, I'll start creating the .nar file..\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	if OtaconIsBusy
	{
		"\1\s[38]Successfully created '%(reference0)'.\1\s[38] There's a good chance you can find it in ssp\ghost, %(username).\e"
	}
	else
	{
		"\0\s[0]Successfully created '%(reference0)'. Huh?\1\s[18] There's a good chance you can find it in ssp\ghost, %(username).\e"
	}
	//reference0 here will be the filename of the nar you just created. It should drop the nar in the folder where all your ghosts are listed, ssp\ghost\.
 }

 //****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
//If you right click your ghost and go into the Utilities menu, there's an option called NTP Time Sync. That's what this is for!
 

 //----OnSNTPBegin ------------------------------------------------------------------
 //As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
 {
	if OtaconIsBusy
	{
		"\1\s[38]Oh, sure, I can check the time. Alright, We're connecting to %(reference0).\e"
	}
	else
	{
		"\0\s[0]Check the time, will you, Otacon?\w9\1\s[10]Yeah! Alright, We're connecting to %(reference0).\e"
	}
	//%(reference0) here is the site they'll be using to check your clock. I wouldn't worry too much about what the site is or where it's defined, it should be accurate. Replace the dialogue with what you need, you don't have to use reference0 if you don't want to.
 }


 //----　OnSNTPCompare----------------------------------------------------------
 //Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. Most of this you don't have to touch, just replace the dialogue as indicated.
 
OnSNTPCompare
 {
	if OtaconIsBusy
	{
		"\1\s[38]"
	}
	else
	{
		"\0\s[0]"
	}
	--	
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
	if OtaconIsBusy
	{
		if reference3 == 0 //if your clock is already accurate.
		{
			"\1\s[38]Looks like it doesn't need to be fixed. That makes that easy.\e" //replace this with whatever message you like.
		}
		else //if your clock doesn't match
		{
			"\1\s[38]Mm. The clock doesn't match.\w6\nWould you like me to fix it really quick, %(username)?\n\n[half]/
			\![*]\q[Fix it,OnSNTPEXECUTE]\n/
			\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
		}
	}
	else
	{
		if reference3 == 0 //if your clock is already accurate.
		{
			"\0\s[0]The clock's accurate, Otacon. \1\s[15]Nice!\e" //replace this with whatever message you like.
		}
		else //if your clock doesn't match
		{
			"\0\s[0]The clock doesn't match.\w6\nShould I fix it?\n\n[half]/
			\![*]\q[Fix it,OnSNTPEXECUTE]\n/
			\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
		}
	}
 }

 //----　OnSNTPEXECUTE ------------------------------------------------------------------
 //After they've fixed your clock. Note the \6 tag - that's what actually changes the clock. Do not remove that tag. Replace the rest with what you want.
 
OnSNTPEXECUTE
 {
	if OtaconIsBusy
	{
		"\1\s[38]Alright, I set it to the correct time for you.\e"
	}
	else
	{
		"\0\s[0]The clock's been fixed.\1\s[15]Nice!\6\e"
	}
	
 }

 //----　OnSNTPCANCEL ------------------------------------------------------------------
 //If you decide not to change your clock when they tell you it doesn't match. Replace with what you want.
 
OnSNTPCANCEL
 {
	if OtaconIsBusy
	{
		"\1\s[38]You don't want me to..? Alright... suit yourself.\e"
	}
	else
	{
		"\0\s[0]Leaving it as it is, huh? Just don't be late.\e"
		"\0\s[0]Leaving it as it is, huh? Just don't be late.\1\s[10]You're one to talk, keeping people waiting all the time.\e"
	}
	
 }

 //----　OnSNTPFailure ------------------------------------------------------------------
 //If they can't change the clock for some reason, possibly because the site timed out but it could be anything. Replace with what you want.
 
OnSNTPFailure
 {
	if OtaconIsBusy
	{
		"\1\s[38]Wait a sec. Sorry, something went wrong. For some reason, I can't change the clock. I don't know what, though.\e"
	}
	else
	{
		"\0\s[0]The clock wasn't changed. What happened, Otacon?\w8\1\s[18]Something went wrong?\1\s[37] Sorry, I can't tell exactly what it was.\e"
	}
	
 }


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



 //---- OnScreenSaverStart -------------------------------------------------------
 //This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven't figured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
 {
	if OtaconIsBusy
	{
		"\1\s[38]Hey! The screensaver is starting! I can't work in the dark!\e"
	}
	else
	{
		"\1\s[13]The screensaver is starting!\w7Wiggle your mouse!\e"
	}
	//Replace with what you want.
 }

 //---- OnScreenSaverEnd -------------------------------------------------------
 //When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
 {
	if (codecTimer > 0 && codecTimer != "finished")
	{
		"\1\s[38]Hey! The screensaver is starting! I can't work in the dark!\e"
	}
	elseif  (missionTimer > 0 && missionTimer != "finished")
	{
		"\1\s[38]Snake, Snake can you hear me? Oh, great. I'm always a little worried when the screensaver goes off I'll lose contact.\e"
	}
	else
	{
		"\1\s[10]Whew, the screensaver is gone. It always feels so weird when it's on.\0\s[8] Eughugh. I don't like it, either.\e"
		"\1\s[10]Ah, it went all dark there for a moment. The screensaver freaks me out.\0\s[0]Being plunged into darkness isn't exactly what I'd call a pleasant experience."
	}
 }


 //---- OnApplicationBoot ---------------------------------------------------------------
 //This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	if OtaconIsBusy
	{
		"\1\s[38]%(reference0) just started. I hope it goes well!\e"
	}
	else
	{
		"\1\s[10]%(reference0) just started. I hope it goes well!\e"
	}
 }

 //---- OnApplicationClose --------------------------------------------------------------
 //See above, but for the program closing.
 
OnApplicationClose
 {
	if OtaconIsBusy
	{
		"\1\s[38]%(reference0) has closed, don't tax your computer with too many programs!\e"
	}
	else
	{
		"\1\s[10]%(reference0) has closed, don't tax your computer with too many programs!\e"
	}
	
 }

 //---- OnApplicationFileOpen ----------------------------------------------------------
 //I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	if OtaconIsBusy
	{
		"\1\s[38]Opening %(reference1).\e"
	}
	else
	{
		"\0\s[0]Opening %(reference1).\e"
	}
 }


 //---- OnBatteryLow -----------------------------------------------------------------
 //This is for when your laptop's battery is low. I don't have a laptop, so I've never really been able to test this. Perhaps someone with a laptop can report back to me with more details about the battery related functions?
 
OnBatteryLow
 {
	if OtaconIsBusy
	{
		"\1\s[38]The device's battery is low. \w8There's about %(reference0) battery left.\1\s[38] You better plug it in, soon, you might lose any progress you haven't saved.\e"
	}
	else
	{
		"\1\s[10]The device's battery is low. \w8\0\s[0]There's %(reference0) power left, huh?\1\s[18] You better plug it in, soon, you might lose any progress you haven't saved.\e"
	}
	
	//reference0 here is the amount of battery power. Replace as you like.
 }
 
 //--OnBatteryCritical-----------------------------------------------------------------
 //Likewise, this is for if your battery is REALLY low. Replace as you like.
 
OnBatteryCritical
{
	if OtaconIsBusy
	{
		"\1\s[38]The device's battery is critically low! \1\s[38]You should close our program before the battery dies, I don't want you to lose your progress. Oh, and don't forget to save your work!\e"
	}
	else
	{
		"\0\s[0]The device's battery is critically low.\1\s[13]You better save your work, or get to a charger soon!\1\s[12] It always goes so dark and cold when the power is off. Brr.\e"
	}
	
}
 
//--OnBatteryNotify--------------------------------------------------------------------
//This I believe checks to see if your laptop is plugged in or not. Originally this bit of code was commented out, so I suspect it may not work. It may need a plug-in of some sort. Either way, you can delete it or fill it out as you like.
//Actually investigating this, leaving this in makes it so the ghost updates you about whether or not your computer is plugged-in constantly, which makes no sense for desktops. No doubt why it was commented out. You can delete it or just leave it be.

/*
OnBatteryNotify
{
	if reference2 == "online" //If your laptop is plugged in
	{
		"\0\s[0]The laptop is plugged in.\e"
	}
	elseif reference2 == "offline" //If you unplug your laptop
	{
		"\1\s[10]The laptop is not plugged in.\w8\0\s[0]Watch your battery.\e"
	}
}
*/


 //--OnShellScaling
 //This is a function however that you may actually use! Or at least, I often use it when desktop space is at a premium (which it always is on my computer). If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down. You can try them out yourself to get an idea of what I mean. I often scale mine down to get them out of the way sometimes. This adds dialogue whenever you change their scale. You don't have to do this if you don't want to, in which case they will just stay silent when you size them up or down. If that's what you want, just delete the whole thing or leave "" instead of any dialogue.
 
OnShellScaling
{
	if OtaconIsBusy
	{
		"\1\s[38]Woah, that felt weird."
	}
	else
	{
		if reference0 > 150 //this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
		{
			"\1\s[10]Ah! Are you sure about this? We're running out of room...\w8\0\s[0]Watch the ceiling, Otacon.\e"
		}
		elseif reference0 >= 200 //this is 200%
		{
			"\1\s[10]Woah, this is getting ridiculous! And ridiculously tight! Is this what it was like in those boxes at Shadow Moses, Snake?\0\s[9] No, it wasn't. Don't remind me.\e"
		}
		elseif reference0 == 100 //this is 100%
		{
			"\1\s[10]We're normal sized, now. Whew.\e"
		}
		elseif reference0 == 50 //this is 50%. You can add any percentage that's listed under shell scaling if you want using more elseifs.
		{
			"\1\s[10]We are now 50% our original size!\w8\0\s[0]Smaller. Feels weird.\1\s[15] I get feeling small, but this is ridiculous!\e"
		}
		elseif reference0 > 50
		{
			"\1\s[10]Woah! Jeez, I feel like a bug! You better be careful not to step on me or something..!"
		}
	}

}