//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.
//Anyway, menu.dic also contains the settings for a config menu that will let your user change their name or pronouns if they want, as well as the talk rate of the ghost, all of which are useful things for your ghost to do. So think hard about whether or not you want to skip this file or not.

//The complexity of this file depends on how customized you want your menus. If you just want to leave them as they are, then all you'll have to do is replace dialogue appropriately. You can always add stuff to their menus later if you get the urge. Otherwise, if you have plans in mind, you'll need to study what's going on in here carefully and pay attention to how things are set up! You can do a lot of unique stuff in this file if you're creative.

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OpenSakuraMenu
//This is a bit of intro dialogue before the main character opens their menu. You can see below that there are three pieces of separate dialogue listed before it goes to MenuRun. The character will randomly choose one of those pieces of dialogue before opening the rest of their menu. You can customize this with individual greetings for the character, such as "Yes, %(username)?" or "Need something, %(username)?" or things like that. Note that none of the lines end with \e!
//The \b2 tag tells the ghost to use their big balloon for this dialogue. If your menu has a lot of stuff, this'll probably look better than the small one.
//If you don't want multiple responses before opening the menu, you can delete the dialogue and just leave MenuRun.

OpenSakuraMenu
{
		"\0\s[0]\b2Need something?"
		"\0\s[0]\b2What needs to be done?"
		"\0\s[0]\b2 Mhmm."
		--
		MenuRun
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	//These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\_q\b2" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	  //If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	  //*********************Advanced User Info*******************************
	  //These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.
	  
	  //I briefly touched in bootend.dic about \q, but I'll again cover it here. Pay very close attention to how this bit of dialogue is formatted. You'll see it goes \![*]\q[Displayed Name,linkedfunction]. Breaking it down, \![*] puts the balloon's option icon in front of the choice (usually a > or something), \q sets up the choice, Displayed Name which is the text that will display in the ghost's balloon, then linkedfunction, which is what the choice is linked to when the user clicks it. As you go through this file, look at how every menu option is set up, and you will see they all follow this format, give or take a \![*]. If you're going to be adding new options to menus or creating your own functions and such, make sure you follow this format and learn it well. Make sure to read the coding page of the walkthrough.
	  //***********************************************************************
	}
	--
 	"\![*]\q[Talk to me.,OnAiTalk]\n"
	"\![*]\q[What are you thinking about?,OnAiTalk]\n"
	
	//This option will force the ghost to say something from aitalk if the user clicks it. Just replace "Say something" and "Say something 2" with whatever captions you think would be appropriate for such an option. IF you don't want two options for captions, delete one of the lines.
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, as long as you separate it from the other options into its own section with two dashes above and below.
	-- //OKUAJUB: I added interactSAKURA.
	"\![*]\q[Interact,interactSAKURA]\n/
	\![*]\q[Config Menu,configmenu]\n/
	\![*]\q[Functions,dosomething]\n\n[half]/
 	\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	
	//These three lead to the Config Menu, the Function menu, and Cancel. You can leave these alone if you like. All the envelopes at the end (see word.dic) basically display the year, month, day, weekday, and time.
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

//This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
		{"0%(minute)"}
	else
		{"%(minute)"}
}

//This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
		{"0%(hour12)"}
	else
		{"%(hour12)"}
}
Select.interactSAKURA //Interaction menu for Snake. Gift him things, talk to him, etc.
{
	"\0\s[8]\b2Hm?\n\n/
	\_q\f[italic,true]Give...\f[italic,default]\n/
	\![*]\q[Cigarettes,giveCigs]\n/
	\![*]\q[Ration,giveRation]\n/
	\![*]\q[Ketchup,giveKetch]\n\n[half]/
	\f[italic,true]Say...\f[italic,default]\n/
	\![*]\q[An insult,sayInsult]\n/
	\![*]\q[A compliment,sayCompliment]\n/
	\![*]\q[A joke,sayJoke]\n"
	--
	if snakeFeelings <= -50
	{
		"\![*]\q[Apologize,sayApology]\n"
	} 
	elseif snakeApologies >= 3
	{
		"\![*]\q \f[strike,true]Apologize\f[strike,default] Snake won't accept that lie again.\n"
	}
	--
	"\n"
	--
	"\f[italic,true]Ask...\f[italic,default]\n/
	\![*]\q[About Shadow Moses,askShadowMosesIncident]\n"
	--
	if clickJaeger >= 1
	{
	"\![*]\q[About Gray Fox,askJaeger]\n"
	}
	--
	if clickBigBoss >= 1
	{
	"\![*]\q[About Big Boss,askBIgBoss]\n"
	}
	--
	"\![*]\q[About Otacon,askOtacon]\n/
	\![*]\q[About Day,askDay]\n\n/
	\![*]\q[Nevermind,BACKTOMENU]\n\n\n/
	\f[italic,true]Inventory\n/
	Ketchup %(snakeKetchups)/20\f[italic,default]/
	\e"
}

//Giving Snake cigarettes.
Select.giveCigs
{
	
	if snakeFeelings <= -50
	{
		"\1\s[31]\0\s[8].\w8.\w8.\w8I don't know why I should trust these won't kill me.\w8\w8\w8\nBut okay.\w8\w8\w8\n\n\f[italic,true]Snake stares at the pack for a moment, hand slightly reached out, before snatching them up and shoving them in one of his bags, as if they would burn him if held too long. Otacon continues to glare at you. But Snake seems slightly appeased.\e"
	}
	elseif snakeFeelings <= -21 && snakeFeelings >= -49
	{
		"\1\s[31]\0\s[9]...\w8\w8\n\n\f[italic,true]Snake hesitantly takes the cigarettes with a grunt. Otacon gives you a short glare. It... worked?\f[italic,default]\e"
	}
	elseif snakeFeelings >= -20 && snakeFeelings <= 20 && otaconFeelings >= -9
	{
		"\0\s[0]Huh. Thanks. I wasn't excpecting that. \1\s[17]%(username)! You know I'm trying to get him to quit! \0\s[5]Well, I have to get them from somewhere, don't I?\1\s[31]Ughh.\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 20 && snakeFeelings <= 50
	{
		"Thank you, %(username), you know my favorite brand.\1\s[33]...\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 51 && otaconFeelings >= -19
	{
		"\0\s[5]Thanks, %(username)!\1\s[31]\w8\w8\w8\w8\w8\0\s[4]\n\w8\w8\w8Sorry,\w4 Hal.\1\s[14]\w8\w8\w8I just worry about your health, Dave.\w8\w8 You're not invincible.\e"
	}
	elseif snakeFeelings >= -20 && snakeFeelings <=20 && otaconFeelings <= -10
	{
		"\0\s[0]Huh. Thanks. I wasn't excpecting that. \1\s[17]%(username)! You know I'm trying to get him to quit! \0\s[5]Well, I have to get them from somewhere, don't I?\1\s[31]Ughh. You two are plotting against me.\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 51 && otaconFeelings <= -30 && snakeApologies == 0
	{
		"\0\s[5]Thanks, %(username)!\1\s[33].\w8\.\w8\.\w8I can't believe you, %(username).\1\s[14]\w8\w8 You too, Dave.\0\s[4]\n...Hal. I didn't mean for this to cause a rift between us-\1\s[31]\nWell, it has.\w8\w8\1\s[33]\w8\w8\w8 Look. I can't make you quit, David. I'm usually teasing you, anyway-\1\s[14] But you can stop standing with %(username). You know what %(heshes) done to me.\w8\w8\nYou can make that decision for yourself. I won't bug you about this anymore, Snake."
		snakeFeelings -= 10
		snakeApologies++ //I didn't want to create a new variable and so I'm using Snake apologies. It makes sense Otacon wouldn't say this if Snake had also been mistreated, and it will make Snake harsher to judge the player should they mistreat him in the future.
	}
	snakeFeelings += 5
	otaconFeelings -= 3
}

//Giving Snake Rations. lol now i have a purpose for giving ketchup a variable.
Select.giveRation
{
	"\0\s[8]\f[italic,true]You hand Snake an MCI ration.\n\n\f[italic,default]"
	--
	if snakeKetchups >= 1 && snakeKetchups <= 9
	{
		"\0\s[5]Hey, I can use that ketchup on this. Thanks.\e"
		snakeKetchups--
		snakeFeelings += 2
	}
	elseif snakeKetchups >= 10 //This is to prevent a user trying to exploit it by giving him a lot of ketchup, the extra friendship point won't count until the last ten. This still gives a modest 30 points, but it technically only saves 10 clicks, so its not that over powered or anything. Combined with the ketchup cap, i think its fine.
	{
		"Jeez, I finally have a use for all that ketchup you gave me.\e"
		snakeKetchups--
	}
	else
	{
	"\0\s[8]Uh, thanks? \f[size,8]Do I even need to eat here..?\f[size,default]\e"
	}
	--
	snakeFeelings++
}

//Giving Snake Ketchup.
Select.giveKetch
{
	--
	if snakeKetchups < 20
	{
	snakeKetchups++
	}
	--
	"\0\s[8]\f[italic,true]You hand Snake a bottle of ketchup.\f[italic,default]\n\n"
	--
	if snakeKetchups == 1
	{
		"Uh, thanks?"
		snakeFeelings++
	}
	elseif snakeKetchups == 2
	{
		"I already had one, but, thanks?"
		snakeFeelings++
	}
	elseif snakeKetchups >= 3 && snakeKetchups <= 9
	{
		"This is getting a little weird."
	}
	elseif snakeKetchups >= 10 && snakeKetchups <= 19
	{
		"\1\s[18]\0\s[8]I think you're freaking Otacon out."
	}
	elseif snakeKetchups >= 20
	{
		"\f[italic,true]Snake gives you a weirded out look.\f[italic,default]"
		snakeFeelings--
	}
	else
	{
		"\f[italic,true]You've somehow managed to give Snake negative ketchup. He hasn't seemed to have noticed, though. Can he even see negative amounts of ketchup? *You* can, probably, you code sleuth! (or if you encounter this in normal play, er... thats a bug. report it for me?)"
	}
	--
	"\e"
}
//Apologizing to Snake. only appears if feelings are lower than 50. This is to help users get back onto a positive track, should they bring his feelings down considerably, but it's not an easy short cut. it's still quite negative. Snake's largest bonus, Cigarettes, would still need to be given to him six times in a row to 'fix' it from this point.
Select.sayApology
{
	"\0\s[8]\f[italic,true]You apologize to Snake for the various things you've done to upset him.\n\n\f[italic,default]\0\s[8]..."
	--
	if snakeApologies >= 3
	{
		"This is the last time. Don't fuck with me again."
	}
	--
	" \w8\w8Make sure your actions speak for your words.\n\n\f[italic,true]Snake has forgiven you. Partially.\f[italic,default]\e"
	snakeFeelings = -30
	snakeApologies++
}
//Asks Snake about the Shadow Moses Incident. Answer depends on feelings.
Select.askShadowMosesIncident
{
	if snakeFeelings >= 50
	{
		"\0\s[9]I was assigned to infiltrate Shadow Moses Island during the Shadow Moses Incident. Otacon and I met on Shadow Moses.\0\s[4] My old unit, FOXHOUND, came under the command of Liquid Snake, another clone of Big Boss, and took over Shadow Moses. They also captured Metal Gear REX, Otacon's project.\0\s[0] I had to kill each of the elite members: Decoy Octopus, Psycho Mantis, Sniper Wolf, Vulcan Raven,\0\s[4] and... Liquid. The other member, Ocelot, escaped with his life. With the help of... an old friend, we managed to destroy REX.\0\s[0] It all came at a heavy price, but I don't regret it.\e"
	}
	elseif snakeFeelings >= 20 && snakeFeelings <= 30
	{
		"\0\s[4]The Shadow Moses Incident was the terrorist take-over of Shadow Moses Island by Liquid Snake.\f[size,8] We're related, in a way.\f[size,default]\0\s[0] He and the rest of the terrorist group, FOXHOUND, captured the base for the Metal Gear inside. Eventually, under the guidance on Colonel Campbell, my former commander, the government was successful in taking them down."
	}
	elseif snakeFeelings >= -29 && snakeFeelings <= 20
	{	
		"\0\s[8]Hmm...\n\n\f[italic,true]Snake huffs, and shifts his eyes side to side. It seems he won't talk about this right now.\f[italic,default]\e"
	}
	elseif snakeFeelings <= -30 && snakeFeelings >= -49
	{
		"\0\s[8]\f[italic,true]Snake glares at you. His hair prickles slightly. Oops.\f[italic,default]\e"
	}
	elseif snakeFeelings <= -50 && snakeFeelings >= -89
	{
		"\0\s[7]Why the hell would I tell someone like you?\1\s[13]\0\s[7]\n\n\f[italic,true]It's clear Snake didn't like that.\f[italic,default]\e"
		snakeFeelings--
	}
	else
	{
		"\0\s[9]\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\0\s[0]\w8\w8\w8Fuck you.\e"
		snakeFeelings -= 5
	}
}

Select.askJaeger
{
	if snakeFeelings >= 35
	{
	"\0\s[8]Jaeger? Best damn soldier I ever knew. He and I were close. When he got captured during N312, I knew I had to do something. In my naivety, I thought Big Boss picked me for N313 for that very reason.\1\s[18]\w8\w8...You loved him. Frank.\0\s[4] I'd have done anything to save him.\e"
	}
	else
	{
		"\0\s[0]bullshitbullshitbullshit replace this diaglog"
	}
}
Select.askBigBoss
{
	if snakeFeelings >= 30 
	{
	"\0\s[8]I thought Big Boss picked me for N313 for that very reason.\e"
	}
	elseif snakeFeelings >= 0 && snakeFeelings <= 29
	{
		"\0\s[0]bullshitbullshitbullshit replace this dialog i'm silently upset at you"
	} 
	else
	{
		"\0\s[0]whatever i hate you dad"
	}
}
//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}

//*********************Advanced User Info*******************************
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though (Like "Do you like going to raves and partying? Yes/No"). Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You can restructure how this looks if you want, but it's perfectly functional as is. You can of course change the dialogue though if you like.

TalkConfig
{
	"\0\b[2]\_q\" 
	//This bit of dialogue sets up a large balloon and a quick session, like above, so all the text will appear immediately. The rest is formatted to display the information and options to change it. I wouldn't touch any of it if you don't know what you're doing.
	//I'll briefly explain the font tags I used here. \f[bold,1] turns bold on, \f[bold,0] turns it off, not unlike a <b> tag. \f[sup,1] turns superscript on (making it tiny and above the text) and \f[sup,0] turns it off. I touch on these tags in the walkthrough on SakuraScript.
	--
	"f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	--
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	--
	"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n\n"
	--
	"\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	--		
		{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
		}
	--
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

//This and the next few set up the pronouns, as you can see by the linkedfunction names. You can replace "\0\s[0]What pronouns do you want?" with your own dialogue if you prefer, but leave the rest of it alone.

Select.TEACHPRONOUN
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[0]He and him, huh? Got it.\e"
	//Leave the part above the double dashes alone. You can replace the snip of dialogue however with whatever you like.
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]She and her, huh? Got it.\e"
	//as above, you can also replace this dialogue.
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]They and them, huh? Got it.\e"
	//and this one.
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."


//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{	
		"\0\s[0]What month were you born? \1\s[10]\w8Name or number is fine.\0\s[0]\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//You can replace the dialogue up to the \![open,inputbox,OnUserBornMonth,-1] tag, leave that alone. You'll need the input box to get the information.
		
		//*********************Advanced User Info*******************************
		//I also touched on this in bootend.dic and explained it in the walkthrough page on coding, but I'll also go into it here. I'm going to break down the tag there at the end of the sentence so you know what it's doing. Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it. Most of this you won't have to touch, but I'll explain what it's doing anyway. I'll point out where you can change the dialogue.

OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\1\s[18]That's not a valid month. Try again, please. If it's a single digit month, don't write it with a zero in front, okay?"
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
			
			//You can replace this dialogue in the first line. You need to leave the tag for the input box so they can put in a correct month. That last tag there for ![set,balloontimeout,-1] makes it so the input box won't time out if the user takes too long.
	}
	--
	//If it's a valid month
	
	"\0\s[0]So,\w8 you were born in %(bornmonthprint), huh?\n\w8What day was it?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
	//Here you can see the use of a bornmonthprint envelope to show the user what month they put in. Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue in the first line just as with above.
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it. Again, there'll be comments explaining how it works, but all you really need to do is change the dialogue appropriately. I'll point out where you can add new dates to check for.

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\1\s[18]That's not a valid day. Try again, please."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\1\s[15]It's the user's birthday!\w8 Happy birthday, %(username)!\e"
			//replace this dialogue with whatever you like
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[0]Born on Christmas, huh?\w8\1\s[15]Happy birthday, %(username)! Too bad you have to share it with the same day you get given a bunch of gifts anyway. \w5\w8\0\s[9]\n\n[half] Wait, you're are getting gifts?\e"
			//As you can see, you can set up an elseif statement to check if the user's birthday is any day you want! More on elseif statements in bootend.dic. In this case, there's specialized dialogue if the user was born on Christmas. You can replace this with whatever you like, or change the date you're checking as well, like to one of your character's birthdays if you want. You can also delete this elseif if you don't care.
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint), hm? We'll remember.\e"
			//note the use of envelopes to display the newly set birthday properly. You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
		}
}

//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[0]\b2How often should we speak?\w8\1\s[10]The interval is currently set to %(talktime)./
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I wouldn't recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[0]No change? Fine by me.\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[0]We'll speak every 30 seconds.\1\s[15] Like us talkative, huh?\0\s[2] I like hearing your voice, too, Otacon.\1\s[30] Hah?\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[0]We'll speak every minute.\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]We'll speak every three minutes.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\1\s[10]We'll speak every five minutes.\e"
	}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "N/A"
		aitalkinterval = 0
		
		"\0\s[0]We won't speak.\1\s[15]Am I that annoying? Hah.\e"
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
		"\0\s[0]All done, hm?\e"
		
		"\0\s[0]Change your mind?\e"
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

Select.dosomething
{
 		"\0\s[0]\b2This is the function menu.\n\n"
		
		//I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened if you offset them from the rest with the -- dashes below this note. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
		//If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue above as you like, but note that they don't end with \e here. You can leave the rest of this below alone.
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n/
		\![*]\q[Check Email,MailCheck]\n/
		\![*]\q[Open SSP Preferences,sspconfig]\n/
		\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[System Information,ChoiceSystemInformation]\n\n/
 		\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]Got it. I'll get the calendar.\w8\![open,calendar]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]Got it. SSP Config Menu.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]Otacon, go check the recycle bin.\w8\1\s[19]Fine, Snake. You know you could do it sometimes, too.\w8\w8\s[-1]\w8\w8\w8\w8\w8\1\s[10]\cIt was empty. Happy?\e"
		
		//This isn't the usual flat template dialogue, mostly because I wanted to show that this is a good place to use s[-1], which I covered in the walkthrough file. You can have your ghost disappear momentarily like they're going to check your recycle bin, then come back. \c clears the ghost's balloon of text. Replace dialogue as you desire.
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]Empty the recycle bin. Got it.\0\s[20]\w2\0\s[21]\w2\0\s[22]\w1\0\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cMission accomplished, come back to base, Snake.\w8\w8\w8\0\s[22]\w2\0\s[21]\w2\0\s[20]\w1\0\s[0]\e"
		
		"\0\s[0]Otacon, you empty the recycle bin, this time.\w8\1\s[19]Fiiine.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cI did it. I saw some nice files in there, though...\e"
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}


	
//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
 {
	"\0\s[9]Time's up. I'm closing the menu.\e"
 }

 
//---- Secondary Character Menu ---------------------------------------------------------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu
 {
	"\1\s[10]\b[2]"
	"\1\s[15]\b[2]"
	"\1\s[16]\b[2]"
	
	//You've seen so far that you can set up multiple options for menu introductions. You can also set up multiple poses to match up to multiple dialogue. So for example, when you open Triangle's menu, he may randomly do any of these three poses, and randomly choose from any of the four dialogue options below, before continuing with his menu. Make a close note of the -- dashes breaking these up.
 	--
	"Hey, %(username)! What do you need?"
 	"What's up, %(username)?"
 	"Hey, %(username)! Let's see... I have a couple options, here."
 	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
 	\![*]\q[Bug report,bugreport]\n\n/
	\![*]\q[FAQ,faq]\n/
	\![*]\q[Ghost Tips,tips]\n/
	\![*]\q[Interact,interactKERO]\n\n/
	//Dev Testing options begin. I comment these out on release. usually.
	\![*]\q[Test variable,testvariable]\n/
	//When you are done with the test variable, aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, simply add two // slashes in front of \![*] to comment the line out. In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.
	\![*]\q[View variablesDEVTEST ONLY,viewvariable]\n/
	\![*]\q[Change variablesDEVTEST ONLY,changevariable]\n/
	\![*]\q[Run SurfacesDEVTEST ONLY,testKEROsurfaces]\n\n/
	\![*]\q[Nothing,keroCANCEL]\e"
}

//There are no real set things for the second character to do, really. You can mostly add whatever functions you want to them, their menu is totally free reign. In mine for example, Hunter has some games, a pseudo-FAQ for users, a bug report, an update option, and most importantly, a test variable. A lot of that is fairly complicated though, so I won't get into it here. Advanced Users can pick up Hunter and Smoker and study their menu.dic to see how I did it though, and those who read the coding page of the walkthrough and want to make their own functions can feel free to add them here. 
//For the purposes of this simple template, I'll include two options that may come in handy - an update option and a bug report option, as well as the test variable.

//If you click cancel. Replace dialogue as you want.
Select.keroCANCEL
{
	"\1\s[18]Nothing caught your eye?\e"
}


//This is when they select bug report. This is mostly meant to briefly give the user information about you, the creator, and how to report a problem to you. This can be handy if the person forgot where they got their ghost or how to contact you. Add whatever info you like here.
Select.bugreport
{
"\1\s[10]Found a bug, huh? Jeez, no wonder I feel a little weird.\w5 You can report bugs to Okuajub.Reports@protonmail.com\n\w5We were downloaded from \_a[https://okuajub.github.io/pcPets/]Here.\_a \e"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\1\s[10]\![updatebymyself]\e"
}
Select.faq //OKUAJUB: FAQ, unlocks more answers as you listen.
{ 
	
	"\1\s[18]\b[2]Got a question for me? Shoot.\n/
	\![*]\_a[whoSnake]Who's Snake?\_a\n/
	\![*]\_a[whoHal]Who's Otacon?\_a\n"
	--
	//'Who" section
	if clickMeiLing >= 1
	{
		"\![*]\_a[whoMeiLing]Who's Mei Ling?\_a\n"
	}
	--
	if clickRaiden >= 1
	{
		"\![*]\_a[whoRaiden]Who's Raiden?\_a\n"
	}
	--
	if otaconFeelings >= 70
		"\![*]\_a[whoEmma]Who's Emma?\_a\n"
	--
	if otaconFeelings >= 80
		"\![*]\_a[whoJulie]Who's Julie?\_a\n"
	--
	//'What' section
	if clickShadowMoses >= 1 
	{
		"\![*]\_a[whoShadowMoses]What's Shadow Moses?\_a\n"
	}
	--
	if clickRex >= 1
	{
		"\![*]\_a[whoRex]What's REX?\_a\n"
	}
	--
	"\![*]\q[Nevermind,keroCANCEL]\x\e"
}
//OKUAJUB: one of Snake and Otacon's main features is to be beginner friendly. So, I thought I might add that option to view specific tips here.
Select.tips
{
	
	"\1\s[15]\b2Oh, Yeah! Do you have anything specific you want to ask me about?\n"
	--
	"\f[italic,true]How do I...\f[italic,default]\n/
	\![*]\_a[talkingTip]Speed up talking?\_a\n/
	\![*]\_a[wallpaperTip]Set my wallpaper?\_a\n/
	\![*]\_a[emailTip]Check my email?\_a\n/
	\![*]\_a[trashTip]Empty the recycle bin?\_a\n/
	\![*]\_a[rssTip]Use RSS Feeds?\_a\n/
	\![*]\_a[specsTip]Find system information?\_a\n/
	\![*]\_a[iconifyTip]Use Iconfiy?\_a\n/
	\![*]\_a[hitpetTip]Hit or Pet my ghost?\_a\n/
	\![*]\q[Nevermind,keroCANCEL]\x\e"
}

Select.interactKERO
{
	"\1\s[10]There's nothing in here yet, but Okuajub will add something here soon. Maybe you'll be able to give me stuff or something? Maybe you can earn money in minigames? Who knows!\e"
}
//--Test Variable --------------------------------------------------------
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can!
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you, particularly if you have a bunch you want to change all at once.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!
//OKUAJUB: the Test variable is currently commented out, but if you'd like to turn it back on, do whatever you'd like! I'd say you should NEVER completely delete it, however. it's too useful!

Select.testvariable
{
//Enter your dialogue to test here.
	"\1\s[18]Testing, attention please!\e"
	
}
Select.testKEROsurfaces //I know Surfacetest exists but simply cycling through the surfaces like this is helpful for me. It helps me notice things I'd overlook in Surfacetest.
{
	"\1\s[10]\w8\w8\w8\s[11]\w8\w8\w8\s[12]\w8\w8\w8\s[13]\w8\w8\w8\s[14]\w8\w8\w8\s[15]\w8\w8\w8\s[16]\w8\w8\w8\s[17]\w8\w8\w8\s[18]\w8\w8\w8\s[19]\w8\w8\w8\s[30]\w8\w8\w8\s[31]\w8\w8\w8\s[32]\w8\w8\w8\s[33]\e"
}

Select.viewvariable
{
	"\1\s[18]clickShadowMoses = %(clickShadowMoses)\n/
	clickShadowMosesIncident = %(clickShadowMosesIncident)\n/
	clickMeiLing = %(clickMeiLing) \n/
	clickRaiden = %(clickRaiden)\n/
	clickRex = %(clickRex)\n/
	snakeFeelings = %(snakeFeelings)\n/
	otaconFeelings = %(otaconFeelings)\n/
	snakeKetchups = %(snakeKetchups)\n/
	snakeApologies = %(snakeApologies)\n/
	\e"
}
//--Changing Variables after First Boot-----------------------------------
//OKUAJUB: This is a testing variable I've added so I can test variables without having to manually reset them using OnFirstBoot from bootend.dic - Accessed from Otacon's menu.
Select.changevariable
{

	clickShadowMoses = 0 //OKUAJUB: Click counting variable for Shadow Moses
	clickShadowMosesIncident = 0 //OKUAJUB: Click counting variable for Shadow Moses *incident*
	clickMeiLing = 0 //OKUAJUB: Click counting variable for Mei Ling
	clickRaiden = 0 //OKUAJUB: Click counting variable for Raiden
	clickJaeger = 0 //OKUAJUB: Click counting variable for Frank Jaeger
	clickBigBoss = 0 //OKUAJUBL Click counting variable for Big Boss
	clickRex = 0 //OKUAJUB: Click counting variable for Rex.
	snakeFeelings = 100 //OKUAJUB: Snake's feelings. its a bit harder to befriend Snake.
	otaconFeelings = 100 //OKUAJUB: Otacon's feelings. Neutral at first.
	snakeKetchups = 0 //OKUAJUB: Count of how many ketchup bottles you have given Snake.
	snakeApologies = 0 //OKUAJUB: How many times you have apologized to Snake.
	
	"\1\s[10]Variables changed. Good luck testing, Okuajub! (Or are you %(username)..?)\n/
	clickShadowMoses = %(clickShadowMoses)\n/
	clickShadowMosesIncident = %(clickShadowMosesIncident)\n/
	clickMeiLing = %(clickMeiLing) \n/
	clickRaiden = %(clickRaiden)\n/
	clickJaeger = %(clickJaeger)\n/
	clickBigBoss = %(clickBigBoss)\n/
	clickRex = %(clickRex)\n/
	snakeFeelings = %(snakeFeelings)\n/
	otaconFeelings = %(otaconFeelings)\n/
	snakeKetchups = %(snakeKetchups)\n/
	snakeApologies = %(snakeApologies)\n/
	\e"
}
