//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.
//Anyway, menu.dic also contains the settings for a config menu that will let your user change their name or pronouns if they want, as well as the talk rate of the ghost, all of which are useful things for your ghost to do. So think hard about whether or not you want to skip this file or not.

//The complexity of this file depends on how customized you want your menus. If you just want to leave them as they are, then all you'll have to do is replace dialogue appropriately. You can always add stuff to their menus later if you get the urge. Otherwise, if you have plans in mind, you'll need to study what's going on in here carefully and pay attention to how things are set up! You can do a lot of unique stuff in this file if you're creative.

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//  __             _        
// / _\_ __   __ _| | _____ 
// \ \| '_ \ / _` | |/ / _ \
// _\ \ | | | (_| |   <  __/
// \__/_| |_|\__,_|_|\_\___|
//~~~~*Snake's Menu*~~~~~~~~~~~~~~~~~~~~~~~~
//--OpenSakuraMenu
//This is a bit of intro dialogue before the main character opens their menu. You can see below that there are three pieces of separate dialogue listed before it goes to MenuRun. The character will randomly choose one of those pieces of dialogue before opening the rest of their menu. You can customize this with individual greetings for the character, such as "Yes, %(username)?" or "Need something, %(username)?" or things like that. Note that none of the lines end with \e!
//The \b2 tag tells the ghost to use their big balloon for this dialogue. If your menu has a lot of stuff, this'll probably look better than the small one.
//If you don't want multiple responses before opening the menu, you can delete the dialogue and just leave MenuRun.

OpenSakuraMenu
{
		"\0\s[0]\b2Need something?"
		"\0\s[0]\b2What needs to be done?"
		"\0\s[0]\b2 Mhmm."
		--
		MenuRun
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	//These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\_q\b2" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	  //If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	  //*********************Advanced User Info*******************************
	  //These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.
	  
	  //I briefly touched in bootend.dic about \q, but I'll again cover it here. Pay very close attention to how this bit of dialogue is formatted. You'll see it goes \![*]\q[Displayed Name,linkedfunction]. Breaking it down, \![*] puts the balloon's option icon in front of the choice (usually a > or something), \q sets up the choice, Displayed Name which is the text that will display in the ghost's balloon, then linkedfunction, which is what the choice is linked to when the user clicks it. As you go through this file, look at how every menu option is set up, and you will see they all follow this format, give or take a \![*]. If you're going to be adding new options to menus or creating your own functions and such, make sure you follow this format and learn it well. Make sure to read the coding page of the walkthrough.
	  //***********************************************************************
	}
	--
 	"\![*]\q[Talk to me.,OnAiTalk]\n"
	"\![*]\q[What are you thinking about?,OnAiTalk]\n"
	
	//This option will force the ghost to say something from aitalk if the user clicks it. Just replace "Say something" and "Say something 2" with whatever captions you think would be appropriate for such an option. IF you don't want two options for captions, delete one of the lines.
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, as long as you separate it from the other options into its own section with two dashes above and below.
	-- //OKUAJUB: I added interactSAKURA.
	"\![*]\q[Interact,interactSAKURA]\n/
	\![*]\q[Config Menu,configmenu]\n/
	\![*]\q[Functions,dosomething]\n\n[half]/
 	\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	
	//These three lead to the Config Menu, the Function menu, and Cancel. You can leave these alone if you like. All the envelopes at the end (see word.dic) basically display the year, month, day, weekday, and time.
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

//This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
		{"0%(minute)"}
	else
		{"%(minute)"}
}

//This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
		{"0%(hour12)"}
	else
		{"%(hour12)"}
}
Select.interactSAKURA //Interaction menu for Snake. Gift him things, talk to him, etc.
{
	"\0\s[8]\b2Hm?\n\n/
	\_q\f[italic,true]Give...\f[italic,default]\n/
	\![*]\q[Cigarettes,giveCigs]\n/
	\![*]\q[Ration,giveRation]\n/
	\![*]\q[Ketchup,giveKetch]\n\n[half]"
	--
	if snakeFeelings <= -50
	{
		"\f[italic,true]Say...\f[italic,default]\n/
		\![*]\q[An Apology,sayApology]\n"
	} 
	elseif snakeApologies >= 3
	{
		"\f[italic,true]Say...\f[italic,default]\n/
		\![*]\q \f[strike,true]An Apology\f[strike,default] Snake won't accept that lie again.\n"
	}
	--
	"\n"
	--
	"\f[italic,true]Ask...\f[italic,default]\n/
	\![*]\q[About Shadow Moses,askShadowMosesIncident]\n"
	--
	if clickJaeger >= 1 && snakeFeelings > 20
	{
	"\![*]\q[About Gray Fox,askJaeger]\n"
	}
	--
	//if clickBigBoss >= 1
	//{
	//"\![*]\q[About Big Boss,askBigBoss]\n"
	//}
	--
	"\![*]\q[About Otacon,askOtacon]\n/
	\![*]\q[Nevermind,BACKTOMENU]\n\n\n/
	\f[italic,true]Inventory\n/
	Ketchup %(snakeKetchups)/20\f[italic,default]/
	\e"
}

//---- Snake Cigs ---------------------------------------------------------
//Giving Snake cigarettes.
Select.giveCigs
{
	
	if snakeFeelings <= -50
	{
		"\1\s[31]\0\s[8].\w8.\w8.\w8I don't know why I should trust these won't kill me.\w8\w8\w8\nBut okay.\w8\w8\w8\n\n[]\f[italic,true]Snake stares at the pack for a moment, hand slightly reached out, before snatching them up and shoving them in one of his bags, as if they would burn him if held too long. Otacon continues to glare at you. But Snake seems slightly appeased.\e"
	}
	elseif snakeFeelings <= -21 && snakeFeelings >= -49
	{
		"\1\s[31]\0\s[9]...\w8\w8\n\n\f[italic,true]Snake hesitantly takes the cigarettes with a grunt. Otacon gives you a short glare. It... worked?\f[italic,default]\e"
	}
	elseif snakeFeelings >= -20 && snakeFeelings <= 20 && otaconFeelings >= -9
	{
		"\0\s[0]Huh. Thanks. I wasn't excpecting that. \1\s[17]%(username)! You know I'm trying to get him to quit! \0\s[5]\n\n[half]Well, I have to get them from somewhere, don't I?\1\s[31]Ughh.\0\s[5]\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 20 && snakeFeelings <= 50
	{
		"\0\s[5]Thank you, %(username), you know my favorite brand.\1\s[33]...\0\s[5]\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 51 && otaconFeelings >= -19
	{
		"\0\s[5]Thanks, %(username)!\1\s[31]\w8\w8\w8\w8\w8\0\s[4]\n\n[half]\w8\w8\w8Sorry,\w4 Hal.\1\s[14]\w8\w8\w8I just worry about your health, Dave.\w8\w8 You're not invincible.\e"
	}
	elseif snakeFeelings >= -20 && snakeFeelings <=20 && otaconFeelings <= -10
	{
		"\0\s[0]Huh. Thanks. I wasn't excpecting that. \1\s[17]%(username)! You know I'm trying to get him to quit! \0\s[5]\n\n[half]Well, I have to get them from somewhere, don't I?\1\s[31]\n\n[half]Ughh. You two are plotting against me.\0\s[5]\n\n\f[italic,true]This won't please both of them, but Snake seems very satisfied...\e"
	}
	elseif snakeFeelings >= 51 && otaconFeelings <= -30 && snakeApologies == 0
	{
		"\0\s[5]Thanks, %(username)!\1\s[33].\w8\.\w8\.\w8I can't believe you, %(username).\1\s[14]\w8\w8 You too, Dave.\0\s[4]\n\n[half]...Hal. I didn't mean for this to cause a rift between us-\1\s[31]\n\n[half]Well, it has.\w8\w8\1\s[33]\w8\w8\w8 Look. I can't make you quit, David. I'm usually teasing you, anyway-\1\s[14] But you can stop standing with %(username)! You know what %(heshes) done to me.\w8\w8\nYou can make that decision for yourself. I won't bug you about this anymore anyway, Snake."
		snakeFeelings -= 10
		snakeApologies++ //I didn't want to create a new variable and so I'm using Snake apologies. It makes sense Otacon wouldn't say this if Snake had also been mistreated, and it will make Snake harsher to judge the player should they mistreat him in the future.
	}
	snakeFeelings += 5
	otaconFeelings -= 3
}

//---- Snake MCIs ---------------------------------------------------------
//Giving Snake Rations. lol now i have a purpose for giving ketchup a variable.
Select.giveRation
{
	"\0\s[8]\f[italic,true]You hand Snake an MCI ration.\n\n\f[italic,default]"
	--
	if snakeKetchups >= 1 && snakeKetchups <= 9
	{
		"\0\s[5]Hey, I can use that ketchup on this. Thanks.\e"
		snakeKetchups--
		snakeFeelings += 2
	}
	elseif snakeKetchups >= 10 //This is to prevent a user trying to exploit it by giving him a lot of ketchup, the extra friendship point won't count until the last ten. This still gives a modest 30 points, but it technically only saves 10 clicks, so its not that over powered or anything. Combined with the ketchup cap, i think its fine.
	{
		"Jeez, I finally have a use for all that ketchup you gave me.\e"
		snakeKetchups--
	}
	else
	{
	"\0\s[8]Uh, thanks? \f[size,8]Do I even need to eat here..?\f[size,default]\e"
	}
	--
	snakeFeelings++
}

//---- Snake Sups ---------------------------------------------------------
//Giving Snake Ketchup.
Select.giveKetch
{
	if snakeKetchups < 20
	{
	snakeKetchups++
	}
	--
	"\0\s[8]\f[italic,true]You hand Snake a bottle of ketchup.\f[italic,default]\n\n[half]"
	--
	if snakeKetchups == 1
	{
		"Uh, thanks?"
		snakeFeelings++
	}
	elseif snakeKetchups == 2
	{
		"I already had one, but, thanks."
		snakeFeelings++
	}
	elseif snakeKetchups >= 3 && snakeKetchups <= 9
	{
		"This is getting weird."
		"What's this all about?"
		"Uh, okay."
		"Where do you get all this stuff from?"
		"This just isn't right."
		"Do You have some kind of obsession?"
		".\w2.\w2.\w2Okay."
		"I guess it's a nice color."
		"Uh. Otacon, do you have any room for this?\1\s[18]Er... I don't think so. Sorry.\0\s[8]"
	}
	elseif snakeKetchups >= 10 && snakeKetchups <= 19
	{
		"\1\s[18]\0\s[8]I think you're freaking Otacon out."
		"What's all this for?"
		"You have all this ketchup for a reason?"
		"Why are you giving me your personal ketchup collection?"
		"Is this some kind of game to you?"
		"Do you use this for something?"
		"\f[italic,true]Snake takes the bottle without saying anything.\f[italic,false]"
		"I don't think we even have anything but rations to put this on."
		"Aren't you getting tired of this?"
		"...Do you expect me to do a little song and dance for you?"
		"I don't need this."
	}
	elseif snakeKetchups >= 20
	{
		"\f[italic,true]Snake gives you an irritated, weirded out look.\f[italic,default]\n\n[half]"
		--
		"I already gave some to Otacon. I can't fit any more of this stuff in my pockets."
		"I don't have any room left."
		"Come on, don't I have enough already?"
		"Trying to get a rise out of me, hm?"
		
		snakeFeelings--
	}
	else
	{
		"\f[italic,true]You've somehow managed to give Snake negative ketchup. He hasn't seemed to have noticed, though. Can he even see negative amounts of ketchup? *You* can, probably, you code sleuth! (or if you encounter this in normal play, er... thats a bug. report it for me?)"
	}
	--
	"\e"
}
//---- Snake Apologies ---------------------------------------------------------
//Apologizing to Snake. only appears if feelings are lower than 50. This is to help users get back onto a positive track, should they bring his feelings down considerably, but it's not an easy short cut. it's still quite negative. Snake's largest bonus, Cigarettes, would still need to be given to him six times in a row to 'fix' it from this point.

Select.sayApology
{
	"\0\s[8]\f[italic,true]You apologize to Snake for the various things you've done to upset him.\n\n\f[italic,default]\0\s[8]... "
	--
	if snakeApologies >= 3
	{
		"This is the last time. Don't fuck with me again."
	}
	--
	"\w8\w8Make sure your actions speak for your words."
	"\w8\w8Make it count."
	"\w8\w8Fine. Don't think I'll forget what you did, though."
	--
	"\n\n\f[italic,true]Snake has forgiven you. Partially.\f[italic,default]\e"
	snakeFeelings = -30
	snakeApologies++
}
//---- Snake FAQ ---------------------------------------------------------
//Asks Snake about the Shadow Moses Incident. Answer depends on feelings.

Select.askShadowMosesIncident
{
	if snakeFeelings >= 50
	{
		"\0\s[9]I was assigned to infiltrate Shadow Moses Island during the Shadow Moses Incident. Otacon and I met on Shadow Moses.\0\s[4] My old unit, FOXHOUND, came under the command of Liquid Snake, another clone of Big Boss, and took over Shadow Moses. They also captured Metal Gear REX, Otacon's project.\0\s[0] I had to kill each of the elite members: Decoy Octopus, Psycho Mantis, Sniper Wolf, Vulcan Raven,\0\s[4] and... Liquid. The other member, Ocelot, escaped with his life. With the help of... an old friend, we managed to destroy REX.\0\s[0] It all came at a heavy price, but I don't regret it.\e"
	}
	elseif snakeFeelings >= 20 && snakeFeelings <= 30
	{
		"\0\s[4]The Shadow Moses Incident was the terrorist take-over of Shadow Moses Island by Liquid Snake.\f[size,8] We're related, in a way.\f[size,default]\0\s[0] He and the rest of the terrorist group, FOXHOUND, captured the base for the Metal Gear inside. Eventually, under the guidance on Colonel Campbell, my former commander, the government was successful in taking them down."
	}
	elseif snakeFeelings >= -29 && snakeFeelings <= 20
	{	
		"\0\s[8]Hmm...\n\n\f[italic,true]Snake huffs, and shifts his eyes side to side. It seems he won't talk about this right now.\f[italic,default]\e"
	}
	elseif snakeFeelings <= -30 && snakeFeelings >= -49
	{
		"\0\s[8]\f[italic,true]Snake glares at you. His hair prickles slightly. Oops.\f[italic,default]\e"
	}
	elseif snakeFeelings <= -50 && snakeFeelings >= -89
	{
		"\0\s[7]Why the hell would I tell someone like you?\1\s[13]\0\s[7]\n\n\f[italic,true]It's clear Snake didn't like that.\f[italic,default]\e"
		snakeFeelings--
	}
	else
	{
		"\0\s[9]\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\0\s[0]\w8\w8\w8Fuck you.\e"
		snakeFeelings -= 5
	}
}

//Asks Snake about Frank Jaeger, Gray Fox.
Select.askJaeger
{
	if snakeFeelings >= 35
	{
	"\0\s[8]Jaeger? Best damn soldier I ever knew. He and I were close. When he got captured during N312, I knew I had to do something. In my naivety, I thought Big Boss picked me for N313 for that very reason.\1\s[18]\w8\w8...You loved him. Gray Fox.\0\s[4] I'd have done anything to save him.\e"
	}
	else
	{
		"\0\s[8]\f[italic,true]Snake studies you warily. You have a feeling Snake doesn't want to talk about who Jaeger is right now.\e"
	}
}

//Asks Snake about Big Boss. Currently unimplemented.
Select.askBigBoss
{
	if snakeFeelings >= 30 
	{
	"\0\s[8]I thought Big Boss picked me for N313 for that very reason.\e"
	}
	elseif snakeFeelings >= 0 && snakeFeelings <= 29
	{
		"\0\s[0]bullshitbullshitbullshit replace this dialog i'm silently upset at you"
	} 
	else
	{
		"\0\s[0]whatever i hate you dad"
	}
}
Select.askOtacon
{
	"\0\s[8]Otacon? He's my partner."
}
//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}

//*********************Advanced User Info*******************************
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though (Like "Do you like going to raves and partying? Yes/No"). Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You can restructure how this looks if you want, but it's perfectly functional as is. You can of course change the dialogue though if you like.

TalkConfig
{
	"\0\b[2]\_q\" 
	//This bit of dialogue sets up a large balloon and a quick session, like above, so all the text will appear immediately. The rest is formatted to display the information and options to change it. I wouldn't touch any of it if you don't know what you're doing.
	//I'll briefly explain the font tags I used here. \f[bold,1] turns bold on, \f[bold,0] turns it off, not unlike a <b> tag. \f[sup,1] turns superscript on (making it tiny and above the text) and \f[sup,0] turns it off. I touch on these tags in the walkthrough on SakuraScript.
	--
	"f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	--
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	--
	"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n\n"
	--
	"\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	--		
		{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
		}
	--
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

//This and the next few set up the pronouns, as you can see by the linkedfunction names. You can replace "\0\s[0]What pronouns do you want?" with your own dialogue if you prefer, but leave the rest of it alone.

Select.TEACHPRONOUN
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[0]He and him, huh? Got it.\e"
	//Leave the part above the double dashes alone. You can replace the snip of dialogue however with whatever you like.
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]She and her, huh? Got it.\e"
	//as above, you can also replace this dialogue.
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]They and them, huh? Got it.\e"
	//and this one.
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."


//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{	
		"\0\s[0]What month were you born? \1\s[10]\w8Name or number is fine.\0\s[0]\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//You can replace the dialogue up to the \![open,inputbox,OnUserBornMonth,-1] tag, leave that alone. You'll need the input box to get the information.
		
		//*********************Advanced User Info*******************************
		//I also touched on this in bootend.dic and explained it in the walkthrough page on coding, but I'll also go into it here. I'm going to break down the tag there at the end of the sentence so you know what it's doing. Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it. Most of this you won't have to touch, but I'll explain what it's doing anyway. I'll point out where you can change the dialogue.

OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\1\s[18]Err, that's not a valid month. Try again, please. If it's a single digit month, don't write it with a zero in front, okay?"
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
			
			//You can replace this dialogue in the first line. You need to leave the tag for the input box so they can put in a correct month. That last tag there for ![set,balloontimeout,-1] makes it so the input box won't time out if the user takes too long.
	}
	--
	//If it's a valid month
	
	"\0\s[0]So,\w8 you were born in %(bornmonthprint), huh?\n\w8What day was it?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
	//Here you can see the use of a bornmonthprint envelope to show the user what month they put in. Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue in the first line just as with above.
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it. Again, there'll be comments explaining how it works, but all you really need to do is change the dialogue appropriately. I'll point out where you can add new dates to check for.

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\1\s[18]That's not a valid day. Try again, please."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\1\s[15]It's the user's birthday!\w8 Happy birthday, %(username)!\e"
			//replace this dialogue with whatever you like
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[0]Born on Christmas, huh?\w8\1\s[15]Too bad you have to share it with the same day you get given a bunch of gifts anyway. \w5\w8\0\s[9]\n\n[half] Wait, you're getting gifts?\e"
			//As you can see, you can set up an elseif statement to check if the user's birthday is any day you want! More on elseif statements in bootend.dic. In this case, there's specialized dialogue if the user was born on Christmas. You can replace this with whatever you like, or change the date you're checking as well, like to one of your character's birthdays if you want. You can also delete this elseif if you don't care.
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint), hm? We'll remember.\e"
			//note the use of envelopes to display the newly set birthday properly. You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
		}
}

//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[0]\b2How often should we speak?\w8\1\s[10]The interval is currently set to %(talktime)./
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I wouldn't recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[0]No change? Fine by me.\e"
		"\0\s[0]Change your mind?\e"
		"\0\s[0]Nothing? Alright."
		"\1\s[10]Do you like the way we are now?"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[0]We'll speak every 30 seconds.\1\s[15]Like us talkative, huh?\0\s[2]\n\n[half]I like talking with you, too, Otacon.\1\s[30]\n\n[half]Hah?\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[0]We'll speak every minute, got it.\e"
		"\1\s[10]Every minute? Okay! I hope you have something to talk about, Snake.\e"
		"\0\s[0]Every minute, huh? Got it."
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]We'll speak every three minutes.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\1\s[10]Okay, every five minutes. Hear that, Snake?\0\s[8]I'm not old yet, Otacon.\e"
		"\1\s[10]Alright, we'll speak every five minutes.\e"
		"\0\s[0]Speak every five minutes. Got it."
	}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "N/A"
		aitalkinterval = 0
		
		"\0\s[0]We won't speak.\1\s[15]Am I that annoying? Hah.\e"
		"\0\s[0]No talking, huh? Got it."
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
		"\0\s[0]All done, huh?\e"
		"\0\s[0]Change your mind?\e"
		"\0\s[0]That all?"
		"\0\s[0]Mhm."
		"\0\s[0]Mm-hmm."
		""
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

Select.dosomething
{
 		"\0\s[0]\b2This is the functions menu, hm?\n\n"
		"\0\s[0]\b2Functions menu, just for you.\n\n"
		"\0\s[0]\b2Got it. Functions menu.\n\n"
		
		//I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened if you offset them from the rest with the -- dashes below this note. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
		//If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue above as you like, but note that they don't end with \e here. You can leave the rest of this below alone.
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n/
		\![*]\q[Check Email,MailCheck]\n/
		\![*]\q[Open SSP Preferences,sspconfig]\n/
		\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[System Information,ChoiceSystemInformation]\n\n/
 		\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]Got it. I'll get the calendar.\w8\![open,calendar]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]Got it. SSP Config Menu.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]Otacon, go check the recycle bin.\w8\1\s[19]Fine, Snake. You know you could do it sometimes, too.\w8\w8\s[-1]\w8\w8\w8\w8\w8\1\s[10]\cIt was empty. Happy?\e"
		
		//This isn't the usual flat template dialogue, mostly because I wanted to show that this is a good place to use s[-1], which I covered in the walkthrough file. You can have your ghost disappear momentarily like they're going to check your recycle bin, then come back. \c clears the ghost's balloon of text. Replace dialogue as you desire.
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]Empty the recycle bin. Got it.\0\s[20]\w2\0\s[21]\w2\0\s[22]\w1\0\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cMission accomplished, come back to base, Snake.\w8\w8\w8\0\s[22]\w2\0\s[21]\w2\0\s[20]\w1\0\s[0]\e"
		
		"\0\s[0]Otacon, you empty the recycle bin, this time.\w8\1\s[19]Fiiine.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cI did it. I saw some nice files in there, though...\e"
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}


	
//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
 {
	"\0\s[9]Time's up. I'm closing the menu.\e"
	"\0\s[9]That's enough. Make up your mind and then choose something, hm?\e"
	"\0\s[9]We're done here. I'm closing the menu."
 }



//    ___ _                        
//   /___\ |_ __ _  ___ ___  _ __  
//  //  // __/ _` |/ __/ _ \| '_ \ 
// / \_//| || (_| | (_| (_) | | | |
// \___/  \__\__,_|\___\___/|_| |_|
//---- Otacon's Menu ---------------------------------------------------------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu
 {
	"\1\s[10]\b[2]"
	"\1\s[15]\b[2]"
	"\1\s[16]\b[2]"
	
	//You've seen so far that you can set up multiple options for menu introductions. You can also set up multiple poses to match up to multiple dialogue. So for example, when you open Otacon's menu, he may randomly do any of these three poses, and randomly choose from any of the four dialogue options below, before continuing with his menu. Make a close note of the -- dashes breaking these up.
 	--
	"Hey, %(username)! What do you need?"
 	"What's up, %(username)?"
 	"Hey, %(username)! Let's see... I have a couple options, here."
 	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
 	\![*]\q[Bug report,bugreport]\n\n/
	\![*]\q[Interact,interactKERO1]\n/
	\![*]\q[FAQ,faq]\n/
	\![*]\q[Ghost Tips,tips]\n\n/
	//Dev Testing options begin. I comment these out on release. usually.
	\![*]\q[Test variable,testvariable]\n/
	//When you are done with the test variable, aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, simply add two // slashes in front of \![*] to comment the line out. In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.
	//\![*]\q[View variablesDEVTEST ONLY,viewvariable]\n/
	//\![*]\q[Change variablesDEVTEST ONLY,changevariable]\n/
	//\![*]\q[Run SurfacesDEVTEST ONLY,testKEROsurfaces]\n\n/
	\![*]\q[Nothing,keroCANCEL]/
	\e"
}

//There are no real set things for the second character to do, really. You can mostly add whatever functions you want to them, their menu is totally free reign. In mine for example, Hunter has some games, a pseudo-FAQ for users, a bug report, an update option, and most importantly, a test variable. A lot of that is fairly complicated though, so I won't get into it here. Advanced Users can pick up Hunter and Smoker and study their menu.dic to see how I did it though, and those who read the coding page of the walkthrough and want to make their own functions can feel free to add them here. 
//For the purposes of this simple template, I'll include two options that may come in handy - an update option and a bug report option, as well as the test variable.

//---- Mundane Options ---------------------------------------------------------

//If you click cancel. Replace dialogue as you want.
Select.keroCANCEL
{
	"\1\s[18]Nothing caught your eye?\e"
	"\1\s[18]All done?\e"
	"\1\s[32]Nothing left to do.\e"
	"\1\s[18]Alright, I'll close the menu then.\e"
}


//This is when they select bug report. This is mostly meant to briefly give the user information about you, the creator, and how to report a problem to you. This can be handy if the person forgot where they got their ghost or how to contact you. Add whatever info you like here.
Select.bugreport
{
"\1\s[10]Found a bug, huh? Jeez, no wonder I feel a little weird.\w5 You can report bugs to Okuajub.Reports@protonmail.com\n\w5We were downloaded from \_a[https://okuajub.github.io/pcPets/]Here.\_a Our craftsman is Okuajub.\e"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\1\s[10]\![updatebymyself]\e"
}

//---- Otacon's FAQ ---------------------------------------------------------
Select.faq //OKUAJUB: FAQ, unlocks more answers as you listen.
{ 
	
	"\1\s[18]\b[2]Got a question for me? Shoot.\n/
	\![*]\_a[whoSnake]Who's Snake?\_a\n/
	\![*]\_a[whoHal]Who's Otacon?\_a\n"
	--
	//'Who" section
	if clickMeiLing >= 1
	{
		"\![*]\_a[whoMeiLing]Who's Mei Ling?\_a\n"
	}
	--
	if clickRaiden >= 1
	{
		"\![*]\_a[whoRaiden]Who's Raiden?\_a\n"
	}
	--
	if otaconFeelings >= 50
		"\![*]\_a[whoEmma]Who's Emma?\_a\n"
	--
	if otaconFeelings >= 80
		"\![*]\_a[whoJulie]Who's Julie?\_a\n"
	--
	//'What' section
	if clickShadowMoses >= 1 
	{
		"\![*]\_a[whoShadowMoses]What's Shadow Moses?\_a\n"
	}
	--
	if clickRex >= 1
	{
		"\![*]\_a[whoRex]What's REX?\_a\n"
	}
	--
	"\![*]\q[Nevermind,keroCANCEL]\x\e"
}

//---- Otacon's Usage Tips ---------------------------------------------------------
//OKUAJUB: one of Snake and Otacon's main features is to be beginner friendly. So, I thought I might add that option to view specific tips here.
//OKUAJUB: as another note: I really suggest just making these functions, if you're looking through this to study. I didn't quite know how to do that when I wrote this, but as you can see I quickly learned. I might clean this up in the future. bleh. The FAQ is anchors for a reason, though. I can just point to the same anchors I use in their random talk.
Select.tips
{
	
	"\1\s[15]\b2Oh, Yeah! Do you have anything specific you want to ask me about?\n"
	--
	"\f[italic,true]How do I...\f[italic,default]\n/
	\![*]\_a[talkingTip]Speed up talking?\_a\n/
	\![*]\_a[wallpaperTip]Set my wallpaper?\_a\n/
	\![*]\_a[emailTip]Check my email?\_a\n/
	\![*]\_a[trashTip]Empty the recycle bin?\_a\n/
	\![*]\_a[rssTip]Use RSS Feeds?\_a\n/
	\![*]\_a[specsTip]Find system information?\_a\n/
	\![*]\_a[iconifyTip]Use Iconfiy?\_a\n/
	\![*]\_a[hitpetTip]Hit or Pet my ghost?\_a\n/
	\![*]\q[Nevermind,keroCANCEL]\x\e"
}

//---- Otacon's Interaction Menu(s) ---------------------------------------------------------
Select.interactKERO1
{
	"\1\s[18]\b2Huh?\n/
	\_q\f[italic,true]Give...\f[italic,default]\n/
	\![*]\q[Cigarettes,giveCigsKERO]\n/
	\![*]\q[Ration,giveRationKERO]\n/
	\![*]\q[Ketchup,giveKetchKERO]\n/
	\![*]\q[Something Else?,giveSomethingKERO]\n"
	--
	if otaconFeelings <= -50
	{
		"\![*]\q[An Apology,sayApologyKERO]\n"
	} 
	--
	"\![*]\q[Nevermind,keroCANCEL] \![*]\q[Next Page,interactKERO2]\n\n/
	\f[italic,true]Inventory\n/
	Ketchup %(snakeKetchups)/20\f[italic,default]/
	\e"
}
Select.interactKERO2
{

	"\1\s[18]\b2Huh?\n/
	\_q\f[italic,true]Play...\f[italic,default]\n/
	\![*]\q[Rock Paper Scissors,playRPS]\n/
	//\![*]\q[Sticks,playSTICKS]\n/ Still working on this one.
	\f[italic,true]Say...\f[italic,default]\n/
	\![*]\q[An insult,sayInsultKERO]\n/
	\![*]\q[A compliment,sayComplimentKERO]\n/
	\![*]\q[A joke,sayJokeKERO]\n/
	\![*]\q[Nevermind,keroCANCEL] \![*]\q[Last Page,interactKERO1]\n\n/
	\f[italic,true]Inventory\n/
	Ketchup %(snakeKetchups)/20\f[italic,default]/
	\e"
}

//---- Otacon's Interactions ---------------------------------------------------------

//---- Giving to Otacon ---------------------------------------------------------

//Giving Otacon Cigarettes.
Select.giveCigsKERO
{
	otaconFeelings--
	"\1\s[18]\f[italic,true]You hand Otacon a pack of cigarettes. \f[italic,default]"
	--
	if otaconFeelings <= -30
	{
		"\1\s[31]\f[italic,true]Otacon looks at you, unimpressed.\f[italic,default]\n\n[half]...You're just trying to get a rise out of me.\n\n\f[italic,true]Otacon throws the cigarettes into the Recycle Bin.\f[italic,default]"
		--
		if RAND(100) < 2 // 3% chance of this dialogue happening, supposedly.
		"\n\n\1\s[15]Kenobi!\f\[size,8] Or something. I don't really know sports.\f[size,default]"
		--
		"\e"
	}
	--
	if otaconFeelings <= -10
	{
		{
			"\1\s[18]\f[italic,true]Otacon looks at them, unimpressed.\f[italic,default]\n\n[half]"
			--
			"...Why are you giving me these?\e"
			"I don't smoke.\e"
		}
		"\1\s[17]\f[italic,true]Otacon doesn't even look at them.\f[italic,default]\n\n[half]Stop giving me cigarettes! I won't smoke!\e"
	}
	--
	if otaconFeelings >= -9
	{
		"\1\s[19]\f[italic,true]Otacon looks at them, unimpressed.\f[italic,default]\n\n[half]"
		--
		"You know I don't smoke, right? It's bad for you.\e"
		"Smoking causes lung cancer, %(username). It says it right here on the package.\e"
		"My mouth isn't an ashtray.\e"//I actually got this line from an old anti-smoking poster for schools. I like to imagine Hal saw this in highschool and accidentally quotes it from his subconcious, sometimes.
	}
	--
	if otaconFeelings > 20
	{
		"\1\s[18]\f[italic,true]Otacon looks at them, unimpressed."
		--
		"\f[italic,default]\n\n[half]I'm not sure why you're giving me this.\e"
		"\f[italic,default]\n\n[half]I don't think I need to tell you I don't want this.\e"
		"He just sighs.\f[italic,default]\e"
		"\f[italic,default]\n\n[half]Look, if you need to dump your cigarettes, put them in the trash can. Don't give them to me.\e"
	}
	--
	if snakeFeelings >= 30
	{
		"\1\s[19]\f[italic,true]Otacon looks at them, unimpressed.\f[italic,default]\n\n[half]Lucky Strike? Did you mean to give these to Snake?\e"
		"\1\s[19]\f[italic,true]Otacon looks at them, unimpressed.\f[italic,default]\n\n[half]Moslems? Did you mean to give these to Snake?\e"
	}
}

//Giving Otacon Rations. Requires ketchup for positive feelings, as Otacon is a bit more picky about it than Snake.
Select.giveRationKERO
{
	"\1\s[18]\f[italic,true]You hand Otacon an MCI ration.\f[italic,default]"
	--
	if snakeKetchups < 1
	{
		otaconFeelings--
		"\1\s[14]\f[italic,true] Otacon wrinkles his nose, despite the fact it's unopened.\f[italic,default]"
		--
		"\1\s[14]\n\n[half]This stuff tastes like cat food..."
		"\1\s[14]\n\n[half]I'll... save this for later."
		"\1\s[14]\n\n[half]Er, sorry. I'm a bit of a picky eater."
		"\1\s[14]\n\n[half]Uhh... Do you want this, Snake..?\0\s[9]"
	}
	if snakeKetchups > 1
	{
		otaconFeelings += 3
		snakeKetchups--
		"\1\s[18]\n\n[half]Huh, I bet the ketchup would make this taste better. Thanks for planning ahead, %(username)?"
		"\1\s[18]\n\n[half]That ketchup you gave us should come in handy, huh, %(username)?"
		"\1\s[30]\n\n[half]Er, I'm just going to borrow some of that ketchup %(username) gave us, Snake. Don't mind me diving into your pockets...\0\s[5]Just don't get too friendly, hm?"
	}
	--
	"\e"
}

//Giving Otacon Ketchup. Required for positive gain via giving menu. Also checks to make sure the ketchup has not hit the cap.
Select.giveKetchKERO
{

	"\1\s[18]\f[italic,true]You hand Otacon a bottle of ketchup.\f[italic,default]\n\n"
	--
	if snakeKetchups == 0
	{
		"\1\s[18]Huh. Reminds me of Shadow Moses."
		"\1\s[18]Thank you?"
		"\1\s[10]Um, Thanks for the ketchup."
		otaconFeelings++
	}	
	elseif snakeKetchups == 1
	{
		"\1\s[18]Uh, thank you? Er, Snake, can you hold this? I don't actually have that many pockets..."
	}
	elseif snakeKetchups == 2
	{
		"\1\s[18]Alright..."
	}
	elseif snakeKetchups >= 3 && snakeKetchups <= 6
	{
		"\1\s[19]This is weird."
		"\1\s[13]This better not be some fetish thing."
		"\1\s[13]What's this for, %(username)?"
		"\1\s[19]Come on, I don't need any more of this stuff."
		"\1\s[19]What's up with you and ketchup, %(username)?"
	}
	elseif snakeKetchups == 7
	{
		"\1\s[18]Lucky number seven, huh? Are you superstitious or something?"
	}
	elseif snakeKetchups >= 8 && snakeKetchups < 20
	{
		"\1\s[13]Are you trying to freak me out?"
		"\1\s[13]Come on, %(username)! This is getting really weird!"
		"\1\s[19]Do you have a plan for all this ketchup, even, %(username)?"
		"\1\s[13]Where are you getting all this stuff..."
		"\1\s[19]You've got to be getting all this ketchup from somewhere. Let me guess, %(username) your dad works at Heinz? Must be something like that..."
		--
		if isNeko = 1
		{
			"\1\s[18]Er, is it safe for cats to have this much tomato?"
			"\1\s[19]You're not trying to imply something about 'catsup', are you?"
		}
	}
	elseif snakeKetchups == 20
	{
		"\1\s[13]Uh... I don't think we can physically carry any more of the stuff. Sorry. \f[size,8]This is so weird...\f[size,default]"
	}
	--
	if snakeKetchups < 20
	{
		snakeKetchups++
	}
	--
	"\e"
}

Select.giveSomethingKERO //Begins giving Otacon "thing"s. "thing"s are whatever the user generates. 
{
	"\1\s[18]\f[italic,true]You try to give Otacon something. What is it?\![open,inputbox,OnGiveThingKERO,-1]"
}
OnGiveThingKERO //maybe I should have used something other than "thing".
{
	"\1\s[18]\f[italic,true]You try to give Otacon %(reference0).\f[italic,default]\n\n[half]"
	--
	reference0 = TOLOWER(reference0) //changes it to lowercase
	reference0 = REPLACE(reference0," ","") //removes spaces
	reference0 = REPLACE(reference0,".","") //removes periods
	reference0 = REPLACE(reference0,"-","") //removes dashes (all these stolen from namesTeach)
	thing = reference0 //This sets whatever the user inputted (reference0) to variable "thing" so I can use it for checks and stuff. just makes things (no pun intended) easier.
	
	if thing == "subs"
	{
		"\1\s[15]Oh! I like this thing."
		--
		"\n\n[half]\f[italic,true]Otacon seems very pleased."
	}
	elseif thing == "dubs"
	{
		"\1\s[18]Oh. I don't like this thing."
	}
	elseif thing == "turgle" || thing == "turgled" || thing == "turgling"
	{
		"\0\s[8]Who turgled?"
	}
	elseif thing == "otacon"
	{
		"\1\s[18]\f[italic,true] But nothing comes out.\f[italic,default]\n\n[half]"
		--
		"\1\s[18]Hey, I saw that input. Don't try making clones of me, too, now!"
		"\1\s[32]Huh. Imagine if that did work? I don't know if I'd like it."
	}
	elseif thing == "snake"
	{
		"\1\s[18]\f[italic,true]The computer thinks for a moment before dropping Otacon a gummy worm.\f[italic,default]\n\n[half]...What? That is... weird."
	}
	elseif thing == "solidsnake"
	{
		"\1\s[18]\f[italic,true]But nothing comes out.\f[italic,default]\n\n[half]"
		--
		"\1\s[18]Huh.\w8\w8\w5\0\s[5]Otacon already \f[italic,true]has\f[italic,default] me. In fact, he's had me many times.\1\s[11]\n\n[half]Snake!!! Oh my god... You-!\w8\1\s[13]\w8\w8\w8\1\s[32]\w8\w8 That was so bad.... You are one of a kind, Snake." //lol
		"You're not trying to clone him now, too, are you?"
	}
	else
	{
		"\1\s[18]\f[italic,true] But nothing comes out.\f[italic,default]\n\n[half]"
		--
		"\1\s[37]Nothing?" 
		"\1\s[37]Change your mind?"
		"\1\s[37]Sorry, I didn't get anything. Did something go wrong on your end?"
	}
	--
	"\e"
}
//Giving Otacon an Apology. Resets feelings to 0. Planning on expanding this to be more fleshed out, like Snake's, but this is fine.
Select.sayApologyKERO
{
	otaconFeelings = 0
	"\1\s[14]If... if you really mean it, then I accept it.\e"
}

//---- Playing Games with Otacon ---------------------------------------------------------

//Quits games.
Select.quitGame
{
	"\1\s[33]Aw, well, thanks for playing with me! It was fun.\e"
}

//---- Rock, Paper, Scissors ---------------------------------------------------------
//Simple Rock, paper, scissors game with Otacon. Not entirely sure what to do with it yet, but I challenged myself to write it in an hour. (If you're curious, I did, haha.) Otacon's also not a sore loser, so no feelings are affected.
//FUTURE OKUAJUB: oh god the code for this got kind of messy. I promise it looked simpler before. adding the rules and everything got it a bit more complicated. It's really easy to make it simpler, though. Just have an if/elseif chain for each choice, and have it roll RAND(2), lose == 0. draw == 1, win == 2. you know. I just get silly, haha. I'll clean this up someday. For now, it works.
Select.playRPS
{
	"\1\s[15]Alright, %(username)!\n /
	\![*]\q[Rock,rockRPS], /
	\![*]\q[Paper,paperRPS], or /
	\![*]\q[Scissors,scissorsRPS]?\n/
	Or do you want me to\n/
	\![*]\q[explain the rules,rulesRPS]?/
	\e"
}
//Rules for Rock, Paper, Scissors. Read to learn how the base game works.
Select.rulesRPS 
{
	"\1\s[15]Okay, Rock, Paper, Scissors is pretty easy to learn. We'll both pick either rock, paper, or scissors and then we declare them at the same time!\1\s[18] If we both threw the same kind, such as rock and rock, it's a tie.\1\s[15] If it's not a tie, then one of each kind is better against another. Rock beats scissors, scissors beats paper, and paper beats rock! That's the name of the game, and how you win!/
	\nAlright, are you ready to \![*]\q[play,playRPS]?\n/
	\![*]\q[I'm done,quitGame]\e"
}
//Player picks Rock
Select.rockRPS //Greater win ratio for both of you.
{	
	_otaconScissors = "\f[italic,true]Otacon throws out his hand with a V shape.\n\f[italic,default]" //Used when Otacon throws Scissors
	_otaconPaper = "\f[italic,true]Otacon throws out his hand flat.\n\f[italic,default]" //Used when Otacon throws Paper
	_otaconRock = "\f[italic,true]Otacon throws out his hand in a fist.\n\f[italic,default]" //Used when Otacon throws Rock
	--
	"\1\s[18]\f[italic,true]You throw your hand out in a fist, and \f[italic,default]" // Sets up what action the player is doing, so it is clearer.
	--
	if RAND(100) < 40 //If the random number is under 40 (not including it), Otacon wins. since RAND(100) pulls 0-99, that gives him a 40% chance of winning when Rock is chosen if the random number generator is perfect.
	{
		otaconFeelings++ //Otacon's feelings increase when he wins.
		_otaconPaper
		--
		"\1\s[15]Hehee! Sorry, %(username). Paper beats rock! I win!"
		--
		"\nYou wanna \![*]\q[go again,playRPS]?"
		--
		"\n\![*]\q[I'm done,quitGame]\e"
	}
	elseif RAND(100) > 39 && RAND(100) < 60 //If the random number pulls a number between 39 and 60, it will be a tie.
	{
		_otaconRock
		--
		"\1\s[18]Huh! That's a tie!"
		--
		"\nC'mon, lets \![*]\q[go again,playRPS]?"
		--
		"\n\![*]\q[I'm done,quitGame]\e"
	}
	else //If the random number is not under 40, or 39-60, the player will win.
	{
		_otaconScissors
		--
		"\1\s[18]Aw, your rock beats my scissors.."
		--
		"\nCome on, let's \![*]\q[go again,playRPS]!"
		--
		"\n\![*]\q[I'm done,quitGame]\e"
	}
}
//Player picks Paper
Select.paperRPS //Approximately even ratio. You know, I usually only play Paper in RPS. Doing the same thing over and over works in the short term, and RPS never lasts long.
{
	_otaconScissors = "\f[italic,true]Otacon throws out his hand with a V shape.\n\f[italic,default]"
	_otaconPaper = "\f[italic,true]Otacon throws out his hand flat.\n\f[italic,default]"
	_otaconRock = "\f[italic,true]Otacon throws out his hand in a fist.\n\f[italic,default]"
	--
	"\1\s[18]\f[italic,true]You throw your hand out flat, and \f[italic,default]"
	--
	if RAND(100) <= 33
	{
		otaconFeelings++
		_otaconScissors
		--
		"\1\s[15]Hehee! Sorry, %(username). Scissors beats paper! I win!"
		"\1\s[15]Hehee! Looks like I was the one to turn your paper into snowflakes this time, huh?"
		"\1\s[15]My scissors beat your paper! Let's go!"
		--
		"\nYou wanna \![*]\q[go again,playRPS]?\e"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
	if RAND(100) > 33 && RAND(100) <= 67
	{
		_otaconPaper
		--
		"\1\s[18]Huh! That's a tie!"
		"\1\s[18]We both threw paper..."
		"\1\s[18]A tie... You know, we should turn these sheets of paper into origami... Anyway!"
		--
		"\nC'mon, lets \![*]\q[go again,playRPS]?\e"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
	else
	{
		_otaconRock
		--
		"\1\s[18]Aw, your paper beats my rock.."
		"\1\s[18]I don't get why paper beats rock... What are rocks good for anyway?\1\s[8]Don't be a sore loser, Otacon.\1\s[19]I'm not!.. Whatever,"
		"\1\s[18]Aw! My rock's... all covered up? Is that how it works?"
		--
		"\nCome on, let's \![*]\q[go again,playRPS]!\e"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
}
//Player picks Scissors
Select.scissorsRPS //Win ratio slightly in the player's favor.
{	
	_otaconScissors = "\f[italic,true]Otacon throws out his hand with a V shape.\n\f[italic,default]"
	_otaconPaper = "\f[italic,true]Otacon throws out his hand flat.\n\f[italic,default]"
	_otaconRock = "\f[italic,true]Otacon throws out his hand in a fist.\n\f[italic,default]"
	--
	"\1\s[18]\f[italic,true]You throw your hand out in a V, and \f[italic,default]"
	--
	if RAND(100) <= 33
	{
		otaconFeelings++
		_otaconRock
		--
		"\1\s[15]Hehee! Sorry, %(username). Rock beats scissors! I win!"
		"\1\s[15]Hehee! Sorry, %(username), my rock banged up your scissors. At least they weren't the fabric scissors, right?"
		"\1\s[15]Looks like I win this time! Rock beats scissors. That was fun!"
		--
		"\nYou wanna \![*]\q[go again,playRPS]?"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
	if RAND(100) >= 34 && RAND(100) <= 64
	{
		_otaconScissors
		--
		"\1\s[18]Huh! That's a tie!"
		"\1\s[18]Aw, we both threw scissors. \f[size,8]We really shouldn't run around with them, let alone throw them around...\f[size,default] Anyway!"
		"\1\s[18]Two scissors, four blades, we're at a tie!"
		--
		"\nC'mon, lets \![*]\q[go again,playRPS]?\e"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
	else
	{
		_otaconPaper
		--
		"\1\s[18]Aw, your scissors beats my paper.."
		"\1\s[18]My paper just got chewed up!"
		"\1\s[18]My paper's in ribbons.."
		"\1\s[18]Darn, you've made snowflakes out of my paper! At least they're pretty."
		--
		"\nCome on, let's \![*]\q[go again,playRPS]!" //I was going to write three for all of the Play Again dialogues, but got bored and figured it didn't matter that much. so Scissors Player Paper Otacon has triple the amount of these than others. ¯\_(ツ)_/¯
		"\nCome on, feeling \![*]\q[lucky,playRPS], %(username)?"
		"\nCome on, I'm sure I can beat you this time. Let's \![*]\q[go again,playRPS]!"
		--
		"\n\![*]\q[I'm done,quitGame]"
	}
	--
	"\e"
}

//---- Sticks ---------------------------------------------------------
//Redacted for now. I still need to bash it into shape. Removed for space.

//---- Otacon's Insulted, Complimented, etc... ---------------------------------------------------------

//---- Insulting Otacon ---------------------------------------------------------
//This may have gotten a bit out of hand, hahh. the player can say some pretty nasty things.
Select.sayInsultKERO
{
	otaconFeelings--
	"\1\s[18]\f[italic,true]"
	--
	if otaconFeelings > -20
	{
		"\1\s[18]You tell Otacon that he's a good-for-nothing nere-do-well."
		"\1\s[18]You tell Otacon he's an idiot."
		"\1\s[18]You tell Otacon he's a stupid weaboo."
		"\1\s[18]You tell Otacon that he's an egghead."
		--
		"\f[italic,false]\n\n"
		--
		"\1\s[17]Hey! What was that for?"
		"\1\s[19]You call that an insult?"
	}
	if otaconFeelings <= -20
	{
		otaconFeelings -= 5
		"\1\s[18]You tell Otacon things would have been better if he switched places with Meryl at Shadow Moses."
		"\1\s[18]You tell Otacon you hope Snake leaves him for someone better."
		"\1\s[18]You tell Otacon you hope he gets hurt on his next mission."
		"\1\s[18]You tell Otacon it's his fault REX became what it is."
		--
		"\f[italic,false]\n\n"
		--
		"\1\s[17]Why would you say something like that?"
		"\1\s[12]Why would you say something like that?"
	}
	if otaconFeelings <= -50 //God these got kind of bad.
	{
		otaconFeelings--
		"\1\s[18]You tell Otacon he should have been born paralyzed like his father."
		"\1\s[18]You tell Otacon he should never have been born."
		"\1\s[18]You tell Otacon it's his fault his father is dead."
		"\1\s[18]You tell Otacon that it was his fault Julie came onto him."
		--
		"\f[italic,false]\n\n"
		--
		"\1\s[12]Oh my god..."
		"\1\s[14]...Maybe you're right."
	}
	if otaconFeelings <= -90
	{
		"\1\s[12]You just yell at Otacon. You're not sure what you're saying."
		"\1\s[12]You tell Otacon you hate him, and you want him to kill himself."
		"\1\s[12]You look at his face and get so angry you start to cry. You don't even need to say anything."
		"\1\s[12]You scream and can't seem to stop screaming, before you're on your hands and knees trying not to cry."
		--
		"\f[italic,false]\n\n"
		--
		"\1\s[12]I-I'm sorry, %(username). I never meant to hurt you like this..."
	}
	--
	"\e"
}

//---- Complimenting Otacon ---------------------------------------------------------
//Feelings boost that scales with Otacon's feelings. For each "level", the player will make a compliment more in line with Otacon's interests, and gain a larger feelings boost. Minimum of +1, so it is not impossible to recover the relationship.
Select.sayComplimentKERO
{
	otaconFeelings++
	
	if otaconFeelings > 50 //Level 5. Player should be familiar with Otacon.
	{
		otaconFeelings += 4 //Adds 4 to the minimum +1 to OtaFeels.
		"\1\s[10]\f[italic,true]You tell Otacon you like the paneling details on his 1/48th RX-78-2 Gundam.\f[italic,default]\n\1\s[30]Ah! Well, thank you. I worked really hard on that one. Due to the larger size the kit needs a bit of a touch-up to make it really shine but... Er. I'm rambling. Thank you."
		"\1\s[10]\f[italic,true]You tell Otacon you're proud of him.\f[italic,default]\n\1\s[30]Oh, um... Thank you?"
		"\1\s[10]\f[italic,true]You tell Otacon you admire his coding ability.\f[italic,default]\n\1\s[30]Oh! Well, it's nothing... I worked hard to get as good as I am, now."
	}
	if otaconFeelings > 20 //Level 4. The player should have learned a little bit about what Otacon likes.
	{
		otaconFeelings += 3
		"\1\s[10]\f[italic,true]You tell Otacon you enjoy his anime selection.\f[italic,default]\n\1\s[30]Thanks! I try and keep it varied. Snake doesn't like to stick to one thing for too long.\s[15] We'd never get through Naruto, haha."
		"\1\s[10]\f[italic,true]You tell Otacon you like his glasses.\f[italic,default]\n\1\s[30]Oh, um, someone else mentioned liking them, too. I guess it's a trend, hah.\w8 Thank you."
	}
	if otaconFeelings > -20 // Level 3. Player starts here on first boot.
	{
		otaconFeelings += 2
		{
		if nowshell == "master"
			{
				"\1\s[10]\f[italic,true]You tell Otacon you like his shirt.\f[italic,default]\n\1\s[30]Oh, um... Thank you?"
			}
		elseif nowshell == "Solid Shell"
			{
				"\1\s[10]\f[italic,true]You tell Otacon you like his shirt.\f[italic,default]\n\1\s[30]Oh, um... thank you! I got it at Otakon- with a K, not a C- in 1996. it'd probably be considered a collector's thing now, 1996 was only the third Otakon, but I can't bring myself to put it on a shelf. I like it too much."
			}
		}
		if isNeko = 1
			{
				"\1\s[10]\f[italic,true]You tell Otacon you think he's cute as a catboy.\f[italic,default]O-oh! Thanks! I, um, like it too."
			}
		"\1\s[10]\f[italic,true]You tell Otacon you like his jacket.\f[italic,default]\n\1\s[30]Oh, this thing? Um... Thank you. It's just something ArmsTech gave me while in Alaska..."
	}
	if otaconFeelings <= -20 //Level 2.
	{
		otaconFeelings++
		"\1\s[10]\f[italic,true]You tell Otacon you think his eyes are cute.\f[italic,default]\n\1\s[30]Oh, um... Thank you..?"
	}
	if otaconFeelings <= -50
	{
		"\1\s[10]\f[italic,true]You tell Otacon he's got nice shoes.\f[italic,default]\n\1\s[30]Um... Thank you?"
		"\1\s[13]\f[italic,true]You tell Otacon he's handsome. He looks visibly uncomfortable.\f[italic,false]\n... Okay. Thank you."
	}
	--
	"\e" //Closing up the dialogue.
}

//--- Joshing Otacon ------------------------------------------------------------
//Kind of random positive or negative boost. Some things go over Otacon's head.
Select.sayJokeKERO
{
	"\1\s[10]\f[italic,true]You tell Otacon a joke about " //Setting up the start of the joke.
	--
	if otaconFeelings > 40 //Adds these joke options to the pool if Otacon's feelings are over 40. Similar level system to compliment.
	{
		if RAND(100) > 29
		{
			"\1\s[10]using frying pans as drying pans.\f[italic,default]\n\n[half]\1\s[15]Hah! I still can't believe they put that in..."
			"\1\s[10]Snake hiding in a Cardboard Box Gundam.\f[italic,default]\0\s[8]\1\s[15]Hahaha! Oh my gosh, do you guys still talk about that in %(year)? I can't believe it."
			"\1\s[10]how they always shout 'It's a Gundam!'\1\s[16]\n\n[half]*Snrk*.\f[italic,default] a Gundam..!"
			--
			otaconFeelings += 3
			"\n\n[half]\1\s[10]That was a good one, %(username)."
		}
		else
		{
			"\1\s[10]the man who was beside himself when he was cloned.\f[italic,default]\0\s[4]\1\s[17]\n\n[half]That's rude! Snake is right here. And not how it works, anyway."
			--
			otaconFeelings += -3
			"\n\n[half]\f[italic,true]It seems Otacon didn't like that."
		}
		
	}
	if otaconFeelings > 20 //Ditto above, but 20 instead of 40.
	{
		if RAND(100) > 29
		{
			"\1\s[10]about how the news about the Origami museum is still unfolding.\1\s[16]\n\n[half]*Snrk*.\f[italic,default]"
			--
			otaconFeelings += 3
			"\n\n[half]\1\s[10]That one was pretty good."
		}
		else
		{
			"where Napoleon's armies go.\f[italic,default]\1\s[18]\n\n[half]Huh? Where's 'Sleevies'? Is it because he's short? Is everyone in Sleevies really short?"
			"why melons can't elope.\f[italic,default]\1\s[18]\n\n[half]What? Who would make a law against melon marriage? They can't even talk."
			--
			otaconFeelings += -3
			"\1\s[19]\w2.\w2\.\w2 I don't get it."
		}
	}
	if isNeko = 1 && RAND(100) > 89 //if Otacon is wearing the Neko accessory, and a random number from 0-99 is more than 89 (10% chance), then these jokes are added to the possible pool.
	{
		if RAND(100) > 30
		{
			"\1\s[10]how he must be purrfect.\f[italic,default]\1\s[30]\n\n[half]Aw, jeez, %(username). That's so cheesy I have to like it."
			"\1\s[10]the new Playstation for cats, the PSpspspsps.\n\n[half]\1\s[18]Otacon tilts his head and seems to focus entirely you for a moment at the sound.\f[italic,default]\n\n[half]\1\s[30]Oh! Uh, sorry. I, er... Hah."
			otaconFeelings += 3
		}
		else
		{
			"\1\s[10]how a cat took first place at a bird show.\f[italic,false]\n\n[half]\1\s[14]Poor little birdy! The cat's owner shouldn't have had him there at all...\1\s[33] That just made me sad."
			"\1\s[10]how the clownfish the cat ate tasted a little funny.\f[italic,default]\n\n[half]\1\s[14]Poor fishie! What an irresponsible fish owner."
			otaconFeelings += -3
		}
	}
	if otaconFeelings <= 19 //If Otacon's feelings are equal to or less than 19, these jokes will be added.
	{
		if RAND(100) > 49
		{
			"\1\s[10]how U R not \f[color,255,0,0]E\f[color,default].\f[italic,default]\n\n[half]Heh, I remember that ad campaign."
			--
			otaconFeelings += 3
			"\1\s[10] That was pretty alright."
		}
		else
		{
			"a fly with no wings.\f[italics,default]\1\s[17]\n\n[half]That's just sad. A fly who can only walk is going to starve to death..."
			"a fish with no Is.\f[italics,default]\1\s[17]\n\n[half]Now that's just a cruel joke! A fish with no eyes? Who would do such a thing? Poor little fishy."
			--
			otaconFeelings += -3
			"\1\s[10] I don't get why you'd say something like that."
		}
	}
	--
	"\e" //Closing up the dialogue.
}

//--Test Variables --------------------------------------------------------
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can!
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you, particularly if you have a bunch you want to change all at once.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!
//OKUAJUB: the Test variable is currently commented out, but if you'd like to turn it back on, do whatever you'd like!

Select.testvariable
{
//Enter your dialogue to test here.
	"\1\s[18]Testing, attention please! "
	--

}

//--Viewing Surfaces------------------------------------
Select.testKEROsurfaces //I know Surfacetest exists but simply cycling through the surfaces like this is helpful for me. It helps me notice things I'd overlook in Surfacetest.
{
	"\1\s[10]\w8\w8\w8\s[11]\w8\w8\w8\s[12]\w8\w8\w8\s[13]\w8\w8\w8\s[14]\w8\w8\w8\s[15]\w8\w8\w8\s[16]\w8\w8\w8\s[17]\w8\w8\w8\s[18]\w8\w8\w8\s[19]\w8\w8\w8\s[30]\w8\w8\w8\s[31]\w8\w8\w8\s[32]\w8\w8\w8\s[33]\e"
}
//--Viewing Variables-----------------------------------
Select.viewvariable
{
	"\1\s[18]clickShadowMoses = %(clickShadowMoses)\n/
	clickShadowMosesIncident = %(clickShadowMosesIncident)\n/
	clickMeiLing = %(clickMeiLing) \n/
	clickRaiden = %(clickRaiden)\n/
	clickRex = %(clickRex)\n/
	snakeFeelings = %(snakeFeelings)\n/
	otaconFeelings = %(otaconFeelings)\n/
	snakeKetchups = %(snakeKetchups)\n/
	snakeApologies = %(snakeApologies)\n/
	\e"
}
//--Changing Variables after First Boot------------------
//OKUAJUB: This is a testing variable I've added so I can test variables without having to manually reset them using OnFirstBoot from bootend.dic - Accessed from Otacon's menu.
Select.changevariable
{

	clickShadowMoses = 0 //OKUAJUB: Click counting variable for Shadow Moses
	clickShadowMosesIncident = 0 //OKUAJUB: Click counting variable for Shadow Moses *incident*
	clickMeiLing = 0 //OKUAJUB: Click counting variable for Mei Ling
	clickRaiden = 0 //OKUAJUB: Click counting variable for Raiden
	clickJaeger = 0 //OKUAJUB: Click counting variable for Frank Jaeger
	clickBigBoss = 0 //OKUAJUBL Click counting variable for Big Boss
	clickRex = 0 //OKUAJUB: Click counting variable for Rex.
	snakeFeelings = 0 //OKUAJUB: Snake's feelings. its a bit harder to befriend Snake.
	otaconFeelings = 0 //OKUAJUB: Otacon's feelings. Neutral at first.
	snakeKetchups = 0 //OKUAJUB: Count of how many ketchup bottles you have given Snake.
	snakeApologies = 0 //OKUAJUB: How many times you have apologized to Snake.
	isNeko = 1
	
	"\1\s[10]Variables changed. Good luck testing, Okuajub! (Or are you %(username)..?)\n/
	clickShadowMoses = %(clickShadowMoses)\n/
	clickShadowMosesIncident = %(clickShadowMosesIncident)\n/
	clickMeiLing = %(clickMeiLing) \n/
	clickRaiden = %(clickRaiden)\n/
	clickJaeger = %(clickJaeger)\n/
	clickBigBoss = %(clickBigBoss)\n/
	clickRex = %(clickRex)\n/
	snakeFeelings = %(snakeFeelings)\n/
	otaconFeelings = %(otaconFeelings)\n/
	snakeKetchups = %(snakeKetchups)\n/
	snakeApologies = %(snakeApologies)\n/
	isNeko = %(isNeko)\n/
	\e"
}
