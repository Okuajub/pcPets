//---------------------------Mouse Functions--------------------------
//As you've probably guessed, this .dic file has to do with mouse functions. This includes the petting feature and what happens when you double click your ghost.
//As a note, this .dic file isn't strictly necessary - I'm pretty sure you can just clear the file and it won't hurt your ghost any, it'll just make it so you can't pet or double click them. And if you're interested in only petting or double clicking one character, all you have to do is delete the chunks of code for the other character you want to be uninvolved. However, I'm assuming most people making ghosts want to make their ghosts pettable and clickable, so this will cover the messages for both.

//Make sure to read the walkthrough page (http://www.ashido.com/ukagaka/) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OnMouseMove
//This is a bunch of code determining who the mouse is over. Don't touch any of it.

OnMouseMove
 {
		//---- reference3 determines the character in question
		if reference3 == 0 //if the character is 0, aka the main character
		{
			//---- it will run the mouse functions for that character
			MouseMoveSakura
		}
		else //if the character isn't 0, then it must be the side character.
		{
			//---- this will run the mouse functions for the side character.
			MouseMoveKero
		}
 }
 
 //*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//If you want to have more than two characters at any point, like for example how I added Charger with my Hunter/Smoker ghost, and you want to be able to interact with that character like you can with the others, you will have to add in that character to OnMouseMove above. You'll need to know the p[] you've assigned your third character to, which in Charger's case was 3. You can assign your third character any p you want, just be consistent about using the same p[] everytime. I touch on \p a bit more in the walkthrough.
//So anyway, as you can see above, OnMouseMove determines who the user is touching, so you'll just have to add in an elseif checking for reference3 == 3, or reference3 == 4, or whatever p number is you're using. More on elseif in the walkthrough and in bootend.dic. After that, you'll just need to copy and paste the other mouse functions below and change the name as you need (for example, MouseMoveCharger, MouseDoubleClickCharger). 

//Note though that the extra character will not be a hard-coded character like 0 and 1! You're basically tricking the program into thinking there's another character, and some functions in things like menu.dic and aitalk.dic won't work quite right if you put in a value other than 0 or 1, and you'll need to be careful about making sure to remove the third character when you're done. But luckily for you, this won't be a problem with any of the mouse functions as far as I'm aware, and you can fill them out for the third character just like you would for the two main ones.
//***********************************************************************


 //--MouseMoveSakura
 //The petting function for your main character. Remember how it was referred to as sakura in some of the descript.txt and install.txt files?
 
MouseMoveSakura
 {
	if reference4 != "" //ignore
 	{
 		stroke++ //if you move the mouse over the right areas, the stroke count will go up.
 		if stroke >= 40 //if the stroke count is above a certain number, the petting dialogue will kick in. You can change this number to make the petting take longer or shorter if you want. FLELEs have it set to 50 for some reason, which makes it take longer than this.
		{
 			stroke = 0 //resetting the stroke count
			if reference4 == "Head" //Pets Snake's head.
 			{
				if snakeFeelings <= -50
				{
					"\0\s[7]Don't fucking touch me."
					"\0\s[8]Get your hands off me."
					"\0\s[8]You think you're entitled to touch me after what you've done?"
					snakeFeelings--
				} 
				if snakeFeelings >= -10
				{
				"\0\s[1]Huh? Stop that.\e"
				"\0\s[1]Hmph.\e"
				snakeFeelings++
				} 
				if snakeFeelings >= 9
				{
				"\0\s[0]....\w8\0\s[1]Feels kind of nice.\e"
				snakeFeelings++
				}
				else 
				{
					"\0\s[1]...Hmph..\e"
					snakeFeelings++
				}
				//Snake likes being petted, very slightly, even if he won't say so.
 			}
 			elseif reference4 == "Face" //Strokes/Touches Snake's face.
 			{
 				if snakeFeelings <= -50
				{
				"\0\s[8]Get your mouse out of my face.\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\e"
 				"\0\s[8]Stop that.\w8\w8\w8\w8\w8\w8\w8\e"
 				"\0\s[8]Knock it off. That's not for you to touch.\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\e"
				snakeFeelings--
				} 
				elseif snakeFeelings >= -49
				{
				"\0\s[8]Get your mouse out of my face.\e"
 				"\0\s[8]Stop that.\e"
 				"\0\s[8]Knock it off. That's not for you to touch.\e"
				snakeFeelings--
				}
				//Snake heavily dislikes his face being stroked. Once past a certain negative friendship, he'll stay in an "irritated" pose for a long time, disallowing more touching.
 			}
			elseif reference4 == "Bust"
			{
				if devMode == 0
				{
					"\0\s[8]What? Expecting me to get all embarassed like those anime girls Otacon installs? Tsh.\e"
				}
				if devMode == 1
				{
					"\0\s[1]Cut it out, Okuajub.\w8\w8\w8\0\s[5] Do I have to teach you some manners?"
				}
			}
			
 		}
	}
 	else
	{
 		// If the mouse isn't over the ghost, it'll zero out the stroke value.
		stroke = 0
 	}
}

 //---- MouseMoveKero -----------------------------------------------------------------
 //MouseMoveKero is exactly like the above, except set up for your second character. 
 
MouseMoveKero
 {
	if reference4 != ""
 	{
 		stroke++
 		if stroke >= 40
		{
			stroke = 0
			if reference4 == "Face" //Strokes Otacon's face.
 			{
				"\1\s[11]Hhh- why are you touching me like that?\0\s[8]%(ItalicsHush)Snake glares at you.\f[italic,default]\e"
				"\1\s[11]Wh-what are you doing?\0\s[8]%(ItalicsHush)Snake glares at you.\f[italic,default]\e"
				"\1\s[11]Ah.. Hh-.\0\s[8]\_q\ Stop doing that. He doesn't like it.\e"
				snakeFeelings--
				//adds negative friendship with Snake when Otacon is Stroked. Otacon freezes, no deduction, Snake dislikes Otacon's face being stroked.
 			}
			elseif reference4 == "Head" //Pets the top of Otacon's head.
			{
				if otaconFeelings <= -50
				{
					"\1\s[12]%(ItalicsHush)Otacon tolerates the touch for a moment before tearing himself away. As he was going to say something, his voice cracks and he thinks better of it, turns away and shuffles towards Snake.\f[italic,default]\5\0\s[8]\1\s[14]\n\n\f[size,10]S-Snake, I think I want to leave.\0\s[9]\f[size,10]\w8\w8\w8I know. \n\w8We'll figure it out.\e"
					otaconFeelings--
					snakeFeelings--
				}
				if otaconFeelings <= -40
				{
					"\1\s[12]%(ItalicsHush)Otacon flinches away from you with a quiet gasp for air, the whites of his eyes flicking away from you.\f[italic,false]\0\s[8]%(ItalicsHush)Snake gives you the side-eye.\f[italic,default]\e"
					"\1\s[12]%(ItalicsHush)Otacon pulls away from the touch, and his chest heaves as though the action took his breath.\f[italic,default]\0\s[7]Damn it, give him a break, %(username).\e"
					otaconFeelings--
				}
				if otaconFeelings <= -11
				{
					"\1\s[13]P-please don't touch me.\e"
					"\1\s[13]Ah, d-don- um... okay."
				}
				if otaconFeelings >= -10
				{
				"\1\s[12]Ah-!\w8\1\s[11] Wh..?\w8\1\s[30] Hey, that felt kinda nice.\e" //I know Snake says almost the same thing, I'm trying to think of an alternate phrase.
				"\1\s[30]Ah, um, h-hey, %(username)..!\e"
				otaconFeelings++
				}
				if otaconFeelings >= 20
				{
				"\1\s[30]T-thanks!\w8 That feels nice... \n\w8You can do it again, if you, um, want.\e"
				"\1\s[16]Ah, this is kinda nice...\w4 reminds me of my animes..\e"
				otaconFeelings++
				}
				
				//Otacon likes being petted when feels are positive. Snake does not mind him being petted, unless Otacon responds strongly.
			}	
 		}
	}
 	else
	{
 		// If the mouse isn't over the ghost, it'll zero out the stroke value.
		stroke = 0
 	}
}

//---- OnMouseClick -------------------------------------------------------
//Simple system for playing sound effects on mouse click.

OnMouseClick
{
	nonoverlap_pool : {
	if reference5 == 0
	{
		if reference3 == 3 || reference3 == 4 //Both of these objects play the same effects. Uses reference3 to use the correct character. == 3 is mk2, == 4 is mk3
		{
			"\p[%(reference3)]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\otacon_05_nice.mp3,--volume=%(soundVolume)]N\w2i\w2c\w2e!"
			"\p[%(reference3)]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\otacon_07_its_me.mp3,--volume=%(soundVolume)]It's \w3me!"
			"\p[%(reference3)]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\otacon_19_otaku_too.mp3,--volume=%(soundVolume)]Are you an \w2otaku, \w4too?"
		}
		if reference3 == 14 //Don-chan's SFX
		{
			"\p[14]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\Don.wav,--volume=%(soundVolume)]Don!"
			"\p[14]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\fullcombo_Don.wav,--volume=%(soundVolume)]Fu\w2ll\w6 Combo!!"
			"\p[14]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\clear1_Don.wav,--volume=%(soundVolume)]Clear!\w6 Full\w2 Combo, Da\w2-don!"
		}
		if reference3 == 15 //Katsu-chan's SFX
		{
			"\p[15]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\Kat.wav,--volume=%(soundVolume)]Ka!"
			"\p[15]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\fullcombo_Kat.wav,--volume=%(soundVolume)]Fu\w2ll\w6 Combo!!"
			"\p[15]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\clear1_Kat.wav,--volume=%(soundVolume)]Clear!\w6 Full\w2 Combo, Da\w2-don!"
		}
	}
	}
}

//---- OnMouseDoubleClick -------------------------------------------------------
//This is set up much like OnMouseMove above, except this is checking to see if the user is double clicking on the ghost. You also don't need to touch any of this. 
//Advanced users adding a third character, the same principles from OnMouseMove apply here as well! Make sure to add an elseif with the right number for your third character.

OnMouseDoubleClick
 {
	//---- like with the OnMouseMove function above, this determines who the user is clicking on.
	if reference5 == 0 //checks which button is being used for the click
	{
	 	case reference3 //What character we're double clicking
		{
			when 0; MouseDoubleClickSakura //Main
			when 1; MouseDoubleClickKero //Secondary
			when 5-13; "\p[%(reference3)]\s[-1]" //Tertiary, makes them disappear.
			when 3; "\![raise,OnDoubleClickSFX,mk2]" //Special, Raises the first SFX config event with the correct object as the reference.
			when 4; "\![raise,OnDoubleClickSFX,mk3]" //Special
			when 14; "\![raise,OnDoubleClickSFX,don]" //Special
			when 15; "\![raise,OnDoubleClickSFX,kat]" //Special
		}
	}
 }

 //---- MouseDoubleClickSakura ----------------------------------------------------------
 //Like the petting animation above, this is the reactions they have to being double clicked. These also rely on the collisions you set up in surfaces.txt! This set is specifically for the main character, as indicated by the Sakura in the name again.
 
 //*********************Advanced User Info*******************************
 //As a note, double clicking on a certain area of your ghost doesn't have to be the user hitting them. You could instead set up a collision for a piece of clothing, and then have the character talk about that bit of clothing when it's double clicked, for example. One of Smoker's double clicks gives her a high-five when she's in a certain pose. Maybe double clicking is patting them, or pointing behind them, or tapping them, or any number of things. You can be creative here with how they respond depending on what areas you've set up as collisions!
 
 //If you don't want your character to be hittable at all, you can just delete everything in MouseDoubleClickSakura except OpenSakuraMenu. So it'd look like
 
 //MouseDoubleClickSakura
 //{
 //OpenSakuraMenu
 //}
 
 //That's all there is to it. This method also applies to the secondary character, Kero, below this set.
 //***********************************************************************
 
MouseDoubleClickSakura
 {
 	
	if reference4 == "Head" || reference4 == "Face" //here, this is checking to see if the user is double clicking on either the character's head OR their face, which for our purposes means they're hitting the ghost. More about operators at the walkthrough.
	{
		if OtaconIsBusy
		{
			"\0\s[8]Don't try anything funny."
		}
		elseif beginnerMode == "Off" && punchConfig == "On" //Checks to see if both beginner mode and punching are Off and On respectively. If true, punch immediately.
		{
			PunchSnake
		}
		elseif punchConfig == "Apologize" //Apology Mode
		{
			PunchSnake
			--
			PunchApologyCheck
		}
		elseif punchConfig == "Confirm"
		{
			"%(ItalicsHush)Are you sure you want to punch Snake?\f[italic,default]\n/
			\![*]\q[Yes,punchConfirmYes]\n/
			\![*]\q[No,punchConfirmNo]"
		}
		elseif beginnerMode == "On" || punchConfig == "Off" //OKUAJUB: If punching is off, or Beginner Mode is on, Snake will take double clicks as pointing at his face/head.
		{
			if snakeFeelings <= -50
			{
				"\0\s[8]It's rude to point. Don't you know that? Stop it."
				"\0\s[8]Who do you think you're pointing at?"
				"\0\s[8]What do you think you're doing?"
			}
			elseif snakeFeelings <= -30 && snakeFeelings > -50
			{
				"\0\s[8]What're you pointing at?"
			}
			elseif snakeFeelings > -30 && snakeFeelings < -10
			{
				"\0\s[8]Hm?"
			}
			elseif snakeFeelings >= -10
			{
				"\0\s[8]Pointing at my hair? No matter what they say, I don't dye it. Got it?"
				"\0\s[8]Why are you so interested in my face? I'm not much to look at.\1\s[30]"
				"\0\s[8]You got something to say about how I look?"
				"\0\s[8]What is it?"
				"\0\s[5]You got a thing for guys with blue eyes?"
			}
		}
		
 	}
	elseif reference4 == "Bust"
	{
		
		if snakeFeelings > -10
		{
			"\0\s[8]What? Expecting me to get all embarassed like those anime girls Otacon installs? Tsh."
			"\0\s[8]Getting friendly, huh? Don't get too excited."
		}
		elseif snakeFeelings > 30
		{
			if presuffix == "feminine"
			{
				"\0\s[6] Sorry, %(username). You're not my type." //okay he's not GAY... 
			}
			--
			"\0\s[6]Look, I know we're not strangers, %(username), but I don't feel that way. Knock it off."
			"\0\s[5]Grab first, ask questions later kind of guy? Hmm."
		}
		elseif snakeFeelings < -50 && presuffix == "feminine"
		{
			"\0\s[6]You're just like \f[italic,true]them.\f[italic,false] You want my body and don't care what I need. Get your damn hands off me.\e"
		}
		elseif snakeFeelings < -11
		{
			"\0\s[8]Keep your hands to yourself, alright?"
			"\0\s[8]What? Expecting me to get all embarassed like those anime girls Otacon installs? Tsh."
		}
	}
	else
 	{
		//Otherwise, if the user doubleclicks somewhere else on the character, they will open their menu as detailed in menu.dic.
 		OpenSakuraMenu
	}
 }
PunchSnake
 {	
		if snakeFeelings <= -50
		{

			"\0\s[3]Gah,\w8\0\s[7] "
			--
			if presuffix == "feminine"
			{
				"you hit hard,\w3 for a woman!" // T_T Sorry...
			}
			else
			{
				"bastard!"
				"son of a..!"
			}
			snakeFeelings--
		}
		if snakeFeelings <= -30
		{
			"\0\s[3]\w8\0\s[8]I wouldn't do that if I were you."
			snakeFeelings--
		} 
		if snakeFeelings <= -10
		{
			"\0\s[3]\w8\0\s[7]What the hell was that for?"
		}
		if snakeFeelings >= -9
		{
			"\0\s[3]\w8\0\s[7]Hey, I'm on your side!"
		}
		if snakeFeelings >= 20 && otaconFeelings >= 20 && snakeApologies < 3
		{
			"\0\s[3]\w8\0\s[7]Hey, knock it off!\w8\1\s[15]\f[height,8]snrk.\f[height,default]\w8\0\s[9]\n\n[half]Shut up."
			snakeFeelings--
			otaconFeelings++ //OKUAJUB: Because he thought it was funny, NOT because he likes it. lol
		}
		//OKUAJUB: Snake hates being hit, but will tolerate it for a little while, without a deduction. At higher friendship he feels a bit betrayed and so it begins to subtract again.
 }

 //---- MouseDoubleClickKero -----------------------------------------------------------
 //This is just the same as MouseDoubleClickSakura above, except for your secondary character. The same principles apply, including how to make your character unhittable.
 
 
MouseDoubleClickKero
 {
 	if reference4 == "Face" //Hitting Otacon's face
	{
		if OtaconIsBusy; "\1\s[38]Hey, what's the big idea? Stop messing with me while I'm working!"
		elseif punchConfig == "On"; PunchOtacon
		elseif punchConfig == "Off"
		{
			"\1\s[18]Hey, what are you pointing at?"
			"\1\s[18]Is my hair ruffled up?"
		}
		elseif punchConfig == "Apologize"
		{
			PunchOtacon
			PunchApologyCheckOta
		}
		elseif punchConfig == "Confirm"
		{
			"\1\s[10]%(ItalicsHush)Are you sure you want to punch Otacon?\f[italic,default]\n/
			\![*]\q[Yes,punchConfirmYesOta]\n/
			\![*]\q[No,punchConfirmNoOta]"
		}
		else; "\1\s[18]Now this isn't right." //Failsafe
		//OKUAJUB: Otacon's face hitting dialogue. Snake will not tolerate this.
 	}
	elseif reference4 == "Head" //Hitting Otacon's head
	{
		if OtaconIsBusy; "\1\s[38]Hey, what's the big idea? Stop messing with me while I'm working!"
		elseif punchConfig == "On"; 
		{
			PunchOtacon
		}
		elseif punchConfig == "Off"
		{
			"\1\s[18]Hey, what are you pointing at?"
			"\1\s[18]Is my hair ruffled up?"
		}
		elseif punchConfig == "Apologize"
		{
			PunchOtacon
			PunchApologyCheckOta
		}
		elseif punchConfig == "Confirm"
		{
			"\1\s[10]%(ItalicsHush)Are you sure you want to punch Otacon?\f[italic,default]\n/
			\![*]\q[Yes,punchConfirmYesOta]\n/
			\![*]\q[No,punchConfirmNoOta]"
		}
		else; "\1\s[18]Now this isn't right."
		//OKUAKUB: Snake will be PISSED if you hit Otacon. He can stand himself being hit, but a huge amount of friendship will be docked any time Otacon is hurt. Otacon's friendship will go down a very slight amount, but not a lot, as he feels he kind of deserves it.
		//OKUAJUB: Due to the fact Otacon't hitboxes are a lot larger, I'm thinking of a way where you have consequences but it doesn't feel unfair. I'll probably have his face hit have slightly less of a deduction to compensate.
 	}
	else //Otherwise if you click anywhere else on Otacon's body
 	{
		OpenKeroMenu //This will open his menu set up in menu.dic.
	}
 }
 
PunchOtacon
 {
	if otaconFeelings <= -20 || snakeFeelings <= -10 //If feels are low enough, Snake will always take the punch.
	{
		"\1\s[12]%(ItalicsHush)As you reel up to hit Otacon, Snake steps in to take the punch.\f[italic,default]"
		--
		if snakeFeelings <= -50
		{
			"\0\s[7]\n\n[half]Don't fucking touch him. I don't care what problem you have. \f[italic,true]\w8Don't.\f[italic,default]"
			"\0\s[7]%(ItalicsHush) He spits some blood on the ground.\n\n[half]\0\s[7]\f[italic,default]Asshole."
		}
		elseif snakeFeelings == -10
		{
			"\0\s[3]\w8\0\s[7]I don't know who the hell you think you are, but you don't hit my partner. Got it?"
		}
		elseif snakeFeelings <= -20 && otaconFeelings <= -30
		{
			"%(ItalicsHush)As he does so, Snake shoves Otacon out of your reach.\0\s[3]\w8\1\s[7]\1\s[12]\4\w3\1\s[-1]\0\s[7]\f[italic,default] Get your shit together, 'User'. He's been through enough. Can't you see that?"
		}
		else; "\0\s[3]\w8\0\s[7]Don't try that again."
	}
	else //Otacon takes the punch most of the time.
	{
		"\1\s[12]Ouch! That hurt!\w8\0\s[7]Leave him alone.\w8\1\s[11] \n\n[half]Snake..?\e"
		"\1\s[12]Ow! That makes my head hurt, please stop!\0\s[8]\e"
		"\1\s[12]Ah! Stop hitting me, p-please!\0\s[8]\e"
		"\1\s[12]P-please stop. Please...\w8\0\s[7]Stop right now.\w8\1\s[11] \n\n[half]Snake...?\e"
		"\1\s[12]%(ItalicsHush)As you reel up to hit Otacon, Snake steps in to take the punch.\f[italic,default]\0\s[3]\w3\0\s[7]Don't touch him. I don't care what problem you have.\f[italic,true]\w8Don't.\f[italic,default]"
		if otaconFeelings < 20
		{
			"\1\s[12]Augh! Hh... I guess I kind of deserved that..."
			"\1\s[12]Ah-! Ow... I did something wrong, didn't I..?"
		}
	}
	snakeFeelings -= 5
	otaconFeelings--
 }

 //Here's some of the functions that get called above. I prefer to stick all of these types of things together because you can usually infer what they do by their name.
 //If I need to adjust multiple of them at once, it's also easier to access.

 PunchApologyCheck : all //function to check for an apology for Snake during Apology mode.
 {
	"\n\n[half]%(ItalicsHush)Apologize?\f[italic,default]\n"
	"\![*]\q[Yes,punchApologyYesSn]\n"
	"\![*]\q[No,punchApologyNoSn]"
 }
Select.punchApologyYesSn //Apologizing
 {
	"%(ItalicsHush)You apologize to Snake for hitting him.\f[italic,default]\n\n[half]\0\s[8]Alright, I'll assume the best. Watch that mouse of yours."
	snakeFeelings++
 }
Select.punchApologyNoSn //Not Apologizing
 {
	"%(ItalicsHush)The moment passes. Snake glares at you."
 }
Select.punchConfirmYes //Confirms the user wants to punch Snake during Confirm mode.
{
	PunchSnake
}
Select.punchConfirmNo //Stops the user from punching Snake during confirm mode.
{
	"\0\s[0]%(ItalicsHush)Nothing happens."
}
 
PunchApologyCheckOta : all //function to check for an apology for Otacon during Apology mode.
 {
	"\n\n[half]%(ItalicsHush)Apologize?\f[italic,default]\n"
	"\![*]\q[Yes,punchApologyYesOta]\n"
	"\![*]\q[No,punchApologyNoOta]"
 }
Select.punchApologyYesOta //Apologizing
 {
	"%(ItalicsHush)You apologize to Otacon.\f[italic,default]\n\n[half]\0\s[8]\w8\1\s[33]Okay.\w8 It's fine."
	otaconFeelings++
	snakeFeelings += 4
 }
Select.punchApologyNoOta //Not Apologizing
 {
	"\1\s[13]%(ItalicsHush)The moment passes.\w6 Snake glares at you.\w6 Otacon looks worried."
 }
Select.punchConfirmYesOta //Confirms the user wants to punch Otacon during Confirm mode.
{
	PunchOtacon
}
Select.punchConfirmNoOta //Stops the user from punching Otacon during confirm mode.
{
	"\1\s[10]%(ItalicsHush)Nothing happens."
}

//SFX Object Controls

OnDoubleClickSFX : all //First event of the volume config.
{
	//reference0 = which object raised the event.
	case reference0 // Checks which object raised the event and selects the appropriate object to 'speak'.
	{
		when 'mk2'; "\p[3]"
		when 'mk3'; "\p[4]"
		when 'don'; "\p[14]"
		when 'kat'; "\p[15]"
	}
	"\f[italic,true]Set the volume for SFX:\![open,inputbox,OnSetSoundVolume,-1,--reference=%(reference0)]" //To avoid repetition, this has been pulled out of the brackets. Also sends the object name to the next function.
}

OnSetSoundVolume //Sets the volume config.
{
	void ValidSoundTest(&reference0)
	soundVolume = reference0
	case reference2
	{
		when 'mk2'; "\p[3]\f[italic,true]Volume set to %(reference0)."
		when 'mk3'; "\p[4]\f[italic,true]Volume set to %(reference0)."
		when 'don'; "\p[14]\f[italic,true]Volume set to %(reference0)."
		when 'kat'; "\p[15]\f[italic,true]Volume set to %(reference0)."
	}
	
}

ValidSoundTest
{
	if GETTYPE(_argv[0]) != 1 //If the first argument is not an integer..
	{
		_argv[0] = TOINT(_argv[0]) //Force it to become an integer. It will become 0 if it is invalid.
	}
	else
	{
		_argv[0] //If it is an integer, leave it alone.
	}
}

OnMouseGesture
{
	if reference0 == 14 || reference0 == 15
	{
		stroke++
		if stroke > 5
		{
			"\p[%(reference0)]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\Don.wav,--volume=%(soundVolume)]"
			stroke = 0
			strokeLong += 1
		}
		elseif reference5 == "end"
		{
			"\p[%(reference0)]Final Drum Count!! %(strokeLong)!!\w8\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\fullcombo_Don.wav,--volume=%(soundVolume)]\nFu\w2ll\w6 Combo!!"
			--
			if strokeLong > currentHighScore && owned[13] != 'katchan'
			{
				"\p[%(reference0)]\n\n[half]%(ItalicsHush)For beating the high score, you've won a Katsu-chan plush. It can be found in Otacon's item menu."
				owned[13] = katchan
			}
			--
			if strokeLong <= currentHighScore
			{
				"\p[%(reference0)]\n\n[half]%(ItalicsHush)The current highscore is %(currentHighScore)."
			}
			elseif strokeLong > currentHighScore
			{
				"\p[%(reference0)]\n\n[half]%(ItalicsHush)The last highscore was %(currentHighScore). It is now %(strokeLong)."
				currentHighScore = strokeLong
			}
			
			strokeLong = 0
		}
	}
}

OnNeedlePoke //Credit to Zi for the original basis of this code, although it's practically entirely different now.
{
	if reference0 == 0 //Sakura
	{
		if reference1 == "Syringe"
		{
			"\0\s[2]Hey! Get that thing away from me!\1\s[18]What, are you afraid of needles, Snake?\0\s[1]\n\n[half]N-No.\w8\w8\s[9]\f[size,9]  Hmhmm.. Damn shots..."
		}
		elseif reference1 == "Tiny Pokey Pixels"
		{
			"\0\s[0]What, you think you can hurt me with that tiny thing?\1\s[10]Hey, be nice, Snake! It's kind of cute, you know."
		}
		elseif reference1 == "Close-Up View"
		{
			if lastPoke == "Tiny Pokey Pixels"
			{
				"\0\s[2]Holy-!!\1\s[13]Woah! Looks like you made %(username) mad by insulting Needle.. Watch out!!"
				"\0\s[2]What the hell-!!\1\s[13]Ow! Snake, you better apologize about what you said to the little needle earlier, or else!\0\s[2]\n\n[half]Alright, alright! I see your \f[italic,true]point\f[italic,false] now! Don't hurt me with it."
			}
			else
			{
				"\0\s[2]What the-?!\1\s[13]Woah! Now that's a huge Needle!\0\s[2]\n\n[half]That thing can really do some damage!"
				"\0\s[2]What the-?!\1\s[13]I know you can use a larger needle for embroidery, but this is overkill!"
			}
		}
		else
		{
			"\0\s[2]Ksh-! What's the big idea?!"
			"\0\s[2]Augh! Hey-?!"
			"\0\s[2]Ow! What the-?!"
		}
	}
	elseif reference0 == 1 //Kero
	{
		if reference1 == "Tiny Pokey Pixels"
		{
			"\1\s[13]Ow! Hey, I know it's small but it still hurts!\0\s[0]What, that tiny thing hurt you?\1\s[31]\n\n[half]You know, if you let a splinter stay too long it gets infected, right?\0\s[0]\n\n[half]Point taken."
		}
		elseif reference1 == "Close-up View"
		{
			if lastPoke == "Tiny Pokey Pixels"
			{
				"\1\s[13]Augh-! Ow, what was that for?!\w8 I \f[italic,true]much\f[italic,false] prefer the little one you had earlier!"
			}
			else
			{
				"\1\s[13]Ow-!! C'mon, why are you poking me with that huge thing?! I could get hurt!\0\s[9]Watch where you point that thing, %(username)."
			}
		}
		else
		{
			"\1\s[13]Ow! Hey, stop it!\0\s[9]"
			"\1\s[13]Ow! Hey! What was that for?\0\s[9]"	
			"\1\s[13]Ah! That hurts, %(username)!\0\s[9]"
		}
	}
	elseif reference0 == 14 //Don-chan Plush
	{
		"\p[14]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\fullcombo_Don.wav,--volume=%(soundVolume)]Fu\w2ll\w6 Combo!!"
	}
	elseif reference0 == 15 //Katsu-chan Plush
	{
		"\p[15]\![sound,play,ghost\Snake_Otacon\ghost\master\sfx\fullcombo_Kat.wav,--volume=%(soundVolume)]Fu\w2ll\w6 Combo!!"
	}
	else //Other
	{
		"\p[%(reference0)]\f[italic,true]You poke it with Needle, but nothing seems to happen.\1\s[18]Why are you poking around, %(username)?"
	}
	lastPoke = reference1
}